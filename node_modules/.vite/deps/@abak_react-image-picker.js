import {
  axios_default
} from "./chunk-WYNMOUL2.js";
import {
  require_jsx_dev_runtime
} from "./chunk-XIZUDOE3.js";
import {
  require_react
} from "./chunk-OU5AQDZK.js";
import {
  __commonJS,
  __toESM
} from "./chunk-EWTE5DHJ.js";

// node_modules/classnames/index.js
var require_classnames = __commonJS({
  "node_modules/classnames/index.js"(exports, module) {
    (function() {
      "use strict";
      var hasOwn = {}.hasOwnProperty;
      function classNames() {
        var classes = "";
        for (var i = 0; i < arguments.length; i++) {
          var arg = arguments[i];
          if (arg) {
            classes = appendClass(classes, parseValue(arg));
          }
        }
        return classes;
      }
      function parseValue(arg) {
        if (typeof arg === "string" || typeof arg === "number") {
          return arg;
        }
        if (typeof arg !== "object") {
          return "";
        }
        if (Array.isArray(arg)) {
          return classNames.apply(null, arg);
        }
        if (arg.toString !== Object.prototype.toString && !arg.toString.toString().includes("[native code]")) {
          return arg.toString();
        }
        var classes = "";
        for (var key in arg) {
          if (hasOwn.call(arg, key) && arg[key]) {
            classes = appendClass(classes, key);
          }
        }
        return classes;
      }
      function appendClass(value, newClass) {
        if (!newClass) {
          return value;
        }
        if (value) {
          return value + " " + newClass;
        }
        return value + newClass;
      }
      if (typeof module !== "undefined" && module.exports) {
        classNames.default = classNames;
        module.exports = classNames;
      } else if (typeof define === "function" && typeof define.amd === "object" && define.amd) {
        define("classnames", [], function() {
          return classNames;
        });
      } else {
        window.classNames = classNames;
      }
    })();
  }
});

// node_modules/@abak/react-image-picker/dist/module.js
var import_jsx_dev_runtime = __toESM(require_jsx_dev_runtime());
var import_react = __toESM(require_react());
var import_classnames = __toESM(require_classnames());
import "/Users/stanley/Developer/QuickPocket/quickpocket-admin-main/node_modules/@abak/react-image-picker/dist/module.css";

// node_modules/tailwind-merge/dist/bundle-mjs.mjs
var CLASS_PART_SEPARATOR = "-";
var createClassGroupUtils = (config) => {
  const classMap = createClassMap(config);
  const {
    conflictingClassGroups,
    conflictingClassGroupModifiers
  } = config;
  const getClassGroupId = (className) => {
    const classParts = className.split(CLASS_PART_SEPARATOR);
    if (classParts[0] === "" && classParts.length !== 1) {
      classParts.shift();
    }
    return getGroupRecursive(classParts, classMap) || getGroupIdForArbitraryProperty(className);
  };
  const getConflictingClassGroupIds = (classGroupId, hasPostfixModifier) => {
    const conflicts = conflictingClassGroups[classGroupId] || [];
    if (hasPostfixModifier && conflictingClassGroupModifiers[classGroupId]) {
      return [...conflicts, ...conflictingClassGroupModifiers[classGroupId]];
    }
    return conflicts;
  };
  return {
    getClassGroupId,
    getConflictingClassGroupIds
  };
};
var getGroupRecursive = (classParts, classPartObject) => {
  var _a;
  if (classParts.length === 0) {
    return classPartObject.classGroupId;
  }
  const currentClassPart = classParts[0];
  const nextClassPartObject = classPartObject.nextPart.get(currentClassPart);
  const classGroupFromNextClassPart = nextClassPartObject ? getGroupRecursive(classParts.slice(1), nextClassPartObject) : void 0;
  if (classGroupFromNextClassPart) {
    return classGroupFromNextClassPart;
  }
  if (classPartObject.validators.length === 0) {
    return void 0;
  }
  const classRest = classParts.join(CLASS_PART_SEPARATOR);
  return (_a = classPartObject.validators.find(({
    validator
  }) => validator(classRest))) == null ? void 0 : _a.classGroupId;
};
var arbitraryPropertyRegex = /^\[(.+)\]$/;
var getGroupIdForArbitraryProperty = (className) => {
  if (arbitraryPropertyRegex.test(className)) {
    const arbitraryPropertyClassName = arbitraryPropertyRegex.exec(className)[1];
    const property = arbitraryPropertyClassName == null ? void 0 : arbitraryPropertyClassName.substring(0, arbitraryPropertyClassName.indexOf(":"));
    if (property) {
      return "arbitrary.." + property;
    }
  }
};
var createClassMap = (config) => {
  const {
    theme,
    prefix
  } = config;
  const classMap = {
    nextPart: /* @__PURE__ */ new Map(),
    validators: []
  };
  const prefixedClassGroupEntries = getPrefixedClassGroupEntries(Object.entries(config.classGroups), prefix);
  prefixedClassGroupEntries.forEach(([classGroupId, classGroup]) => {
    processClassesRecursively(classGroup, classMap, classGroupId, theme);
  });
  return classMap;
};
var processClassesRecursively = (classGroup, classPartObject, classGroupId, theme) => {
  classGroup.forEach((classDefinition) => {
    if (typeof classDefinition === "string") {
      const classPartObjectToEdit = classDefinition === "" ? classPartObject : getPart(classPartObject, classDefinition);
      classPartObjectToEdit.classGroupId = classGroupId;
      return;
    }
    if (typeof classDefinition === "function") {
      if (isThemeGetter(classDefinition)) {
        processClassesRecursively(classDefinition(theme), classPartObject, classGroupId, theme);
        return;
      }
      classPartObject.validators.push({
        validator: classDefinition,
        classGroupId
      });
      return;
    }
    Object.entries(classDefinition).forEach(([key, classGroup2]) => {
      processClassesRecursively(classGroup2, getPart(classPartObject, key), classGroupId, theme);
    });
  });
};
var getPart = (classPartObject, path) => {
  let currentClassPartObject = classPartObject;
  path.split(CLASS_PART_SEPARATOR).forEach((pathPart) => {
    if (!currentClassPartObject.nextPart.has(pathPart)) {
      currentClassPartObject.nextPart.set(pathPart, {
        nextPart: /* @__PURE__ */ new Map(),
        validators: []
      });
    }
    currentClassPartObject = currentClassPartObject.nextPart.get(pathPart);
  });
  return currentClassPartObject;
};
var isThemeGetter = (func) => func.isThemeGetter;
var getPrefixedClassGroupEntries = (classGroupEntries, prefix) => {
  if (!prefix) {
    return classGroupEntries;
  }
  return classGroupEntries.map(([classGroupId, classGroup]) => {
    const prefixedClassGroup = classGroup.map((classDefinition) => {
      if (typeof classDefinition === "string") {
        return prefix + classDefinition;
      }
      if (typeof classDefinition === "object") {
        return Object.fromEntries(Object.entries(classDefinition).map(([key, value]) => [prefix + key, value]));
      }
      return classDefinition;
    });
    return [classGroupId, prefixedClassGroup];
  });
};
var createLruCache = (maxCacheSize) => {
  if (maxCacheSize < 1) {
    return {
      get: () => void 0,
      set: () => {
      }
    };
  }
  let cacheSize = 0;
  let cache = /* @__PURE__ */ new Map();
  let previousCache = /* @__PURE__ */ new Map();
  const update = (key, value) => {
    cache.set(key, value);
    cacheSize++;
    if (cacheSize > maxCacheSize) {
      cacheSize = 0;
      previousCache = cache;
      cache = /* @__PURE__ */ new Map();
    }
  };
  return {
    get(key) {
      let value = cache.get(key);
      if (value !== void 0) {
        return value;
      }
      if ((value = previousCache.get(key)) !== void 0) {
        update(key, value);
        return value;
      }
    },
    set(key, value) {
      if (cache.has(key)) {
        cache.set(key, value);
      } else {
        update(key, value);
      }
    }
  };
};
var IMPORTANT_MODIFIER = "!";
var createParseClassName = (config) => {
  const {
    separator,
    experimentalParseClassName
  } = config;
  const isSeparatorSingleCharacter = separator.length === 1;
  const firstSeparatorCharacter = separator[0];
  const separatorLength = separator.length;
  const parseClassName = (className) => {
    const modifiers = [];
    let bracketDepth = 0;
    let modifierStart = 0;
    let postfixModifierPosition;
    for (let index = 0; index < className.length; index++) {
      let currentCharacter = className[index];
      if (bracketDepth === 0) {
        if (currentCharacter === firstSeparatorCharacter && (isSeparatorSingleCharacter || className.slice(index, index + separatorLength) === separator)) {
          modifiers.push(className.slice(modifierStart, index));
          modifierStart = index + separatorLength;
          continue;
        }
        if (currentCharacter === "/") {
          postfixModifierPosition = index;
          continue;
        }
      }
      if (currentCharacter === "[") {
        bracketDepth++;
      } else if (currentCharacter === "]") {
        bracketDepth--;
      }
    }
    const baseClassNameWithImportantModifier = modifiers.length === 0 ? className : className.substring(modifierStart);
    const hasImportantModifier = baseClassNameWithImportantModifier.startsWith(IMPORTANT_MODIFIER);
    const baseClassName = hasImportantModifier ? baseClassNameWithImportantModifier.substring(1) : baseClassNameWithImportantModifier;
    const maybePostfixModifierPosition = postfixModifierPosition && postfixModifierPosition > modifierStart ? postfixModifierPosition - modifierStart : void 0;
    return {
      modifiers,
      hasImportantModifier,
      baseClassName,
      maybePostfixModifierPosition
    };
  };
  if (experimentalParseClassName) {
    return (className) => experimentalParseClassName({
      className,
      parseClassName
    });
  }
  return parseClassName;
};
var sortModifiers = (modifiers) => {
  if (modifiers.length <= 1) {
    return modifiers;
  }
  const sortedModifiers = [];
  let unsortedModifiers = [];
  modifiers.forEach((modifier) => {
    const isArbitraryVariant = modifier[0] === "[";
    if (isArbitraryVariant) {
      sortedModifiers.push(...unsortedModifiers.sort(), modifier);
      unsortedModifiers = [];
    } else {
      unsortedModifiers.push(modifier);
    }
  });
  sortedModifiers.push(...unsortedModifiers.sort());
  return sortedModifiers;
};
var createConfigUtils = (config) => ({
  cache: createLruCache(config.cacheSize),
  parseClassName: createParseClassName(config),
  ...createClassGroupUtils(config)
});
var SPLIT_CLASSES_REGEX = /\s+/;
var mergeClassList = (classList, configUtils) => {
  const {
    parseClassName,
    getClassGroupId,
    getConflictingClassGroupIds
  } = configUtils;
  const classGroupsInConflict = [];
  const classNames = classList.trim().split(SPLIT_CLASSES_REGEX);
  let result = "";
  for (let index = classNames.length - 1; index >= 0; index -= 1) {
    const originalClassName = classNames[index];
    const {
      modifiers,
      hasImportantModifier,
      baseClassName,
      maybePostfixModifierPosition
    } = parseClassName(originalClassName);
    let hasPostfixModifier = Boolean(maybePostfixModifierPosition);
    let classGroupId = getClassGroupId(hasPostfixModifier ? baseClassName.substring(0, maybePostfixModifierPosition) : baseClassName);
    if (!classGroupId) {
      if (!hasPostfixModifier) {
        result = originalClassName + (result.length > 0 ? " " + result : result);
        continue;
      }
      classGroupId = getClassGroupId(baseClassName);
      if (!classGroupId) {
        result = originalClassName + (result.length > 0 ? " " + result : result);
        continue;
      }
      hasPostfixModifier = false;
    }
    const variantModifier = sortModifiers(modifiers).join(":");
    const modifierId = hasImportantModifier ? variantModifier + IMPORTANT_MODIFIER : variantModifier;
    const classId = modifierId + classGroupId;
    if (classGroupsInConflict.includes(classId)) {
      continue;
    }
    classGroupsInConflict.push(classId);
    const conflictGroups = getConflictingClassGroupIds(classGroupId, hasPostfixModifier);
    for (let i = 0; i < conflictGroups.length; ++i) {
      const group = conflictGroups[i];
      classGroupsInConflict.push(modifierId + group);
    }
    result = originalClassName + (result.length > 0 ? " " + result : result);
  }
  return result;
};
function twJoin() {
  let index = 0;
  let argument;
  let resolvedValue;
  let string = "";
  while (index < arguments.length) {
    if (argument = arguments[index++]) {
      if (resolvedValue = toValue(argument)) {
        string && (string += " ");
        string += resolvedValue;
      }
    }
  }
  return string;
}
var toValue = (mix) => {
  if (typeof mix === "string") {
    return mix;
  }
  let resolvedValue;
  let string = "";
  for (let k = 0; k < mix.length; k++) {
    if (mix[k]) {
      if (resolvedValue = toValue(mix[k])) {
        string && (string += " ");
        string += resolvedValue;
      }
    }
  }
  return string;
};
function createTailwindMerge(createConfigFirst, ...createConfigRest) {
  let configUtils;
  let cacheGet;
  let cacheSet;
  let functionToCall = initTailwindMerge;
  function initTailwindMerge(classList) {
    const config = createConfigRest.reduce((previousConfig, createConfigCurrent) => createConfigCurrent(previousConfig), createConfigFirst());
    configUtils = createConfigUtils(config);
    cacheGet = configUtils.cache.get;
    cacheSet = configUtils.cache.set;
    functionToCall = tailwindMerge;
    return tailwindMerge(classList);
  }
  function tailwindMerge(classList) {
    const cachedResult = cacheGet(classList);
    if (cachedResult) {
      return cachedResult;
    }
    const result = mergeClassList(classList, configUtils);
    cacheSet(classList, result);
    return result;
  }
  return function callTailwindMerge() {
    return functionToCall(twJoin.apply(null, arguments));
  };
}
var fromTheme = (key) => {
  const themeGetter = (theme) => theme[key] || [];
  themeGetter.isThemeGetter = true;
  return themeGetter;
};
var arbitraryValueRegex = /^\[(?:([a-z-]+):)?(.+)\]$/i;
var fractionRegex = /^\d+\/\d+$/;
var stringLengths = /* @__PURE__ */ new Set(["px", "full", "screen"]);
var tshirtUnitRegex = /^(\d+(\.\d+)?)?(xs|sm|md|lg|xl)$/;
var lengthUnitRegex = /\d+(%|px|r?em|[sdl]?v([hwib]|min|max)|pt|pc|in|cm|mm|cap|ch|ex|r?lh|cq(w|h|i|b|min|max))|\b(calc|min|max|clamp)\(.+\)|^0$/;
var colorFunctionRegex = /^(rgba?|hsla?|hwb|(ok)?(lab|lch))\(.+\)$/;
var shadowRegex = /^(inset_)?-?((\d+)?\.?(\d+)[a-z]+|0)_-?((\d+)?\.?(\d+)[a-z]+|0)/;
var imageRegex = /^(url|image|image-set|cross-fade|element|(repeating-)?(linear|radial|conic)-gradient)\(.+\)$/;
var isLength = (value) => isNumber(value) || stringLengths.has(value) || fractionRegex.test(value);
var isArbitraryLength = (value) => getIsArbitraryValue(value, "length", isLengthOnly);
var isNumber = (value) => Boolean(value) && !Number.isNaN(Number(value));
var isArbitraryNumber = (value) => getIsArbitraryValue(value, "number", isNumber);
var isInteger = (value) => Boolean(value) && Number.isInteger(Number(value));
var isPercent = (value) => value.endsWith("%") && isNumber(value.slice(0, -1));
var isArbitraryValue = (value) => arbitraryValueRegex.test(value);
var isTshirtSize = (value) => tshirtUnitRegex.test(value);
var sizeLabels = /* @__PURE__ */ new Set(["length", "size", "percentage"]);
var isArbitrarySize = (value) => getIsArbitraryValue(value, sizeLabels, isNever);
var isArbitraryPosition = (value) => getIsArbitraryValue(value, "position", isNever);
var imageLabels = /* @__PURE__ */ new Set(["image", "url"]);
var isArbitraryImage = (value) => getIsArbitraryValue(value, imageLabels, isImage);
var isArbitraryShadow = (value) => getIsArbitraryValue(value, "", isShadow);
var isAny = () => true;
var getIsArbitraryValue = (value, label, testValue) => {
  const result = arbitraryValueRegex.exec(value);
  if (result) {
    if (result[1]) {
      return typeof label === "string" ? result[1] === label : label.has(result[1]);
    }
    return testValue(result[2]);
  }
  return false;
};
var isLengthOnly = (value) => (
  // `colorFunctionRegex` check is necessary because color functions can have percentages in them which which would be incorrectly classified as lengths.
  // For example, `hsl(0 0% 0%)` would be classified as a length without this check.
  // I could also use lookbehind assertion in `lengthUnitRegex` but that isn't supported widely enough.
  lengthUnitRegex.test(value) && !colorFunctionRegex.test(value)
);
var isNever = () => false;
var isShadow = (value) => shadowRegex.test(value);
var isImage = (value) => imageRegex.test(value);
var validators = Object.defineProperty({
  __proto__: null,
  isAny,
  isArbitraryImage,
  isArbitraryLength,
  isArbitraryNumber,
  isArbitraryPosition,
  isArbitraryShadow,
  isArbitrarySize,
  isArbitraryValue,
  isInteger,
  isLength,
  isNumber,
  isPercent,
  isTshirtSize
}, Symbol.toStringTag, {
  value: "Module"
});
var getDefaultConfig = () => {
  const colors = fromTheme("colors");
  const spacing = fromTheme("spacing");
  const blur = fromTheme("blur");
  const brightness = fromTheme("brightness");
  const borderColor = fromTheme("borderColor");
  const borderRadius = fromTheme("borderRadius");
  const borderSpacing = fromTheme("borderSpacing");
  const borderWidth = fromTheme("borderWidth");
  const contrast = fromTheme("contrast");
  const grayscale = fromTheme("grayscale");
  const hueRotate = fromTheme("hueRotate");
  const invert = fromTheme("invert");
  const gap = fromTheme("gap");
  const gradientColorStops = fromTheme("gradientColorStops");
  const gradientColorStopPositions = fromTheme("gradientColorStopPositions");
  const inset = fromTheme("inset");
  const margin = fromTheme("margin");
  const opacity = fromTheme("opacity");
  const padding = fromTheme("padding");
  const saturate = fromTheme("saturate");
  const scale = fromTheme("scale");
  const sepia = fromTheme("sepia");
  const skew = fromTheme("skew");
  const space = fromTheme("space");
  const translate = fromTheme("translate");
  const getOverscroll = () => ["auto", "contain", "none"];
  const getOverflow = () => ["auto", "hidden", "clip", "visible", "scroll"];
  const getSpacingWithAutoAndArbitrary = () => ["auto", isArbitraryValue, spacing];
  const getSpacingWithArbitrary = () => [isArbitraryValue, spacing];
  const getLengthWithEmptyAndArbitrary = () => ["", isLength, isArbitraryLength];
  const getNumberWithAutoAndArbitrary = () => ["auto", isNumber, isArbitraryValue];
  const getPositions = () => ["bottom", "center", "left", "left-bottom", "left-top", "right", "right-bottom", "right-top", "top"];
  const getLineStyles = () => ["solid", "dashed", "dotted", "double", "none"];
  const getBlendModes = () => ["normal", "multiply", "screen", "overlay", "darken", "lighten", "color-dodge", "color-burn", "hard-light", "soft-light", "difference", "exclusion", "hue", "saturation", "color", "luminosity"];
  const getAlign = () => ["start", "end", "center", "between", "around", "evenly", "stretch"];
  const getZeroAndEmpty = () => ["", "0", isArbitraryValue];
  const getBreaks = () => ["auto", "avoid", "all", "avoid-page", "page", "left", "right", "column"];
  const getNumberAndArbitrary = () => [isNumber, isArbitraryValue];
  return {
    cacheSize: 500,
    separator: ":",
    theme: {
      colors: [isAny],
      spacing: [isLength, isArbitraryLength],
      blur: ["none", "", isTshirtSize, isArbitraryValue],
      brightness: getNumberAndArbitrary(),
      borderColor: [colors],
      borderRadius: ["none", "", "full", isTshirtSize, isArbitraryValue],
      borderSpacing: getSpacingWithArbitrary(),
      borderWidth: getLengthWithEmptyAndArbitrary(),
      contrast: getNumberAndArbitrary(),
      grayscale: getZeroAndEmpty(),
      hueRotate: getNumberAndArbitrary(),
      invert: getZeroAndEmpty(),
      gap: getSpacingWithArbitrary(),
      gradientColorStops: [colors],
      gradientColorStopPositions: [isPercent, isArbitraryLength],
      inset: getSpacingWithAutoAndArbitrary(),
      margin: getSpacingWithAutoAndArbitrary(),
      opacity: getNumberAndArbitrary(),
      padding: getSpacingWithArbitrary(),
      saturate: getNumberAndArbitrary(),
      scale: getNumberAndArbitrary(),
      sepia: getZeroAndEmpty(),
      skew: getNumberAndArbitrary(),
      space: getSpacingWithArbitrary(),
      translate: getSpacingWithArbitrary()
    },
    classGroups: {
      // Layout
      /**
       * Aspect Ratio
       * @see https://tailwindcss.com/docs/aspect-ratio
       */
      aspect: [{
        aspect: ["auto", "square", "video", isArbitraryValue]
      }],
      /**
       * Container
       * @see https://tailwindcss.com/docs/container
       */
      container: ["container"],
      /**
       * Columns
       * @see https://tailwindcss.com/docs/columns
       */
      columns: [{
        columns: [isTshirtSize]
      }],
      /**
       * Break After
       * @see https://tailwindcss.com/docs/break-after
       */
      "break-after": [{
        "break-after": getBreaks()
      }],
      /**
       * Break Before
       * @see https://tailwindcss.com/docs/break-before
       */
      "break-before": [{
        "break-before": getBreaks()
      }],
      /**
       * Break Inside
       * @see https://tailwindcss.com/docs/break-inside
       */
      "break-inside": [{
        "break-inside": ["auto", "avoid", "avoid-page", "avoid-column"]
      }],
      /**
       * Box Decoration Break
       * @see https://tailwindcss.com/docs/box-decoration-break
       */
      "box-decoration": [{
        "box-decoration": ["slice", "clone"]
      }],
      /**
       * Box Sizing
       * @see https://tailwindcss.com/docs/box-sizing
       */
      box: [{
        box: ["border", "content"]
      }],
      /**
       * Display
       * @see https://tailwindcss.com/docs/display
       */
      display: ["block", "inline-block", "inline", "flex", "inline-flex", "table", "inline-table", "table-caption", "table-cell", "table-column", "table-column-group", "table-footer-group", "table-header-group", "table-row-group", "table-row", "flow-root", "grid", "inline-grid", "contents", "list-item", "hidden"],
      /**
       * Floats
       * @see https://tailwindcss.com/docs/float
       */
      float: [{
        float: ["right", "left", "none", "start", "end"]
      }],
      /**
       * Clear
       * @see https://tailwindcss.com/docs/clear
       */
      clear: [{
        clear: ["left", "right", "both", "none", "start", "end"]
      }],
      /**
       * Isolation
       * @see https://tailwindcss.com/docs/isolation
       */
      isolation: ["isolate", "isolation-auto"],
      /**
       * Object Fit
       * @see https://tailwindcss.com/docs/object-fit
       */
      "object-fit": [{
        object: ["contain", "cover", "fill", "none", "scale-down"]
      }],
      /**
       * Object Position
       * @see https://tailwindcss.com/docs/object-position
       */
      "object-position": [{
        object: [...getPositions(), isArbitraryValue]
      }],
      /**
       * Overflow
       * @see https://tailwindcss.com/docs/overflow
       */
      overflow: [{
        overflow: getOverflow()
      }],
      /**
       * Overflow X
       * @see https://tailwindcss.com/docs/overflow
       */
      "overflow-x": [{
        "overflow-x": getOverflow()
      }],
      /**
       * Overflow Y
       * @see https://tailwindcss.com/docs/overflow
       */
      "overflow-y": [{
        "overflow-y": getOverflow()
      }],
      /**
       * Overscroll Behavior
       * @see https://tailwindcss.com/docs/overscroll-behavior
       */
      overscroll: [{
        overscroll: getOverscroll()
      }],
      /**
       * Overscroll Behavior X
       * @see https://tailwindcss.com/docs/overscroll-behavior
       */
      "overscroll-x": [{
        "overscroll-x": getOverscroll()
      }],
      /**
       * Overscroll Behavior Y
       * @see https://tailwindcss.com/docs/overscroll-behavior
       */
      "overscroll-y": [{
        "overscroll-y": getOverscroll()
      }],
      /**
       * Position
       * @see https://tailwindcss.com/docs/position
       */
      position: ["static", "fixed", "absolute", "relative", "sticky"],
      /**
       * Top / Right / Bottom / Left
       * @see https://tailwindcss.com/docs/top-right-bottom-left
       */
      inset: [{
        inset: [inset]
      }],
      /**
       * Right / Left
       * @see https://tailwindcss.com/docs/top-right-bottom-left
       */
      "inset-x": [{
        "inset-x": [inset]
      }],
      /**
       * Top / Bottom
       * @see https://tailwindcss.com/docs/top-right-bottom-left
       */
      "inset-y": [{
        "inset-y": [inset]
      }],
      /**
       * Start
       * @see https://tailwindcss.com/docs/top-right-bottom-left
       */
      start: [{
        start: [inset]
      }],
      /**
       * End
       * @see https://tailwindcss.com/docs/top-right-bottom-left
       */
      end: [{
        end: [inset]
      }],
      /**
       * Top
       * @see https://tailwindcss.com/docs/top-right-bottom-left
       */
      top: [{
        top: [inset]
      }],
      /**
       * Right
       * @see https://tailwindcss.com/docs/top-right-bottom-left
       */
      right: [{
        right: [inset]
      }],
      /**
       * Bottom
       * @see https://tailwindcss.com/docs/top-right-bottom-left
       */
      bottom: [{
        bottom: [inset]
      }],
      /**
       * Left
       * @see https://tailwindcss.com/docs/top-right-bottom-left
       */
      left: [{
        left: [inset]
      }],
      /**
       * Visibility
       * @see https://tailwindcss.com/docs/visibility
       */
      visibility: ["visible", "invisible", "collapse"],
      /**
       * Z-Index
       * @see https://tailwindcss.com/docs/z-index
       */
      z: [{
        z: ["auto", isInteger, isArbitraryValue]
      }],
      // Flexbox and Grid
      /**
       * Flex Basis
       * @see https://tailwindcss.com/docs/flex-basis
       */
      basis: [{
        basis: getSpacingWithAutoAndArbitrary()
      }],
      /**
       * Flex Direction
       * @see https://tailwindcss.com/docs/flex-direction
       */
      "flex-direction": [{
        flex: ["row", "row-reverse", "col", "col-reverse"]
      }],
      /**
       * Flex Wrap
       * @see https://tailwindcss.com/docs/flex-wrap
       */
      "flex-wrap": [{
        flex: ["wrap", "wrap-reverse", "nowrap"]
      }],
      /**
       * Flex
       * @see https://tailwindcss.com/docs/flex
       */
      flex: [{
        flex: ["1", "auto", "initial", "none", isArbitraryValue]
      }],
      /**
       * Flex Grow
       * @see https://tailwindcss.com/docs/flex-grow
       */
      grow: [{
        grow: getZeroAndEmpty()
      }],
      /**
       * Flex Shrink
       * @see https://tailwindcss.com/docs/flex-shrink
       */
      shrink: [{
        shrink: getZeroAndEmpty()
      }],
      /**
       * Order
       * @see https://tailwindcss.com/docs/order
       */
      order: [{
        order: ["first", "last", "none", isInteger, isArbitraryValue]
      }],
      /**
       * Grid Template Columns
       * @see https://tailwindcss.com/docs/grid-template-columns
       */
      "grid-cols": [{
        "grid-cols": [isAny]
      }],
      /**
       * Grid Column Start / End
       * @see https://tailwindcss.com/docs/grid-column
       */
      "col-start-end": [{
        col: ["auto", {
          span: ["full", isInteger, isArbitraryValue]
        }, isArbitraryValue]
      }],
      /**
       * Grid Column Start
       * @see https://tailwindcss.com/docs/grid-column
       */
      "col-start": [{
        "col-start": getNumberWithAutoAndArbitrary()
      }],
      /**
       * Grid Column End
       * @see https://tailwindcss.com/docs/grid-column
       */
      "col-end": [{
        "col-end": getNumberWithAutoAndArbitrary()
      }],
      /**
       * Grid Template Rows
       * @see https://tailwindcss.com/docs/grid-template-rows
       */
      "grid-rows": [{
        "grid-rows": [isAny]
      }],
      /**
       * Grid Row Start / End
       * @see https://tailwindcss.com/docs/grid-row
       */
      "row-start-end": [{
        row: ["auto", {
          span: [isInteger, isArbitraryValue]
        }, isArbitraryValue]
      }],
      /**
       * Grid Row Start
       * @see https://tailwindcss.com/docs/grid-row
       */
      "row-start": [{
        "row-start": getNumberWithAutoAndArbitrary()
      }],
      /**
       * Grid Row End
       * @see https://tailwindcss.com/docs/grid-row
       */
      "row-end": [{
        "row-end": getNumberWithAutoAndArbitrary()
      }],
      /**
       * Grid Auto Flow
       * @see https://tailwindcss.com/docs/grid-auto-flow
       */
      "grid-flow": [{
        "grid-flow": ["row", "col", "dense", "row-dense", "col-dense"]
      }],
      /**
       * Grid Auto Columns
       * @see https://tailwindcss.com/docs/grid-auto-columns
       */
      "auto-cols": [{
        "auto-cols": ["auto", "min", "max", "fr", isArbitraryValue]
      }],
      /**
       * Grid Auto Rows
       * @see https://tailwindcss.com/docs/grid-auto-rows
       */
      "auto-rows": [{
        "auto-rows": ["auto", "min", "max", "fr", isArbitraryValue]
      }],
      /**
       * Gap
       * @see https://tailwindcss.com/docs/gap
       */
      gap: [{
        gap: [gap]
      }],
      /**
       * Gap X
       * @see https://tailwindcss.com/docs/gap
       */
      "gap-x": [{
        "gap-x": [gap]
      }],
      /**
       * Gap Y
       * @see https://tailwindcss.com/docs/gap
       */
      "gap-y": [{
        "gap-y": [gap]
      }],
      /**
       * Justify Content
       * @see https://tailwindcss.com/docs/justify-content
       */
      "justify-content": [{
        justify: ["normal", ...getAlign()]
      }],
      /**
       * Justify Items
       * @see https://tailwindcss.com/docs/justify-items
       */
      "justify-items": [{
        "justify-items": ["start", "end", "center", "stretch"]
      }],
      /**
       * Justify Self
       * @see https://tailwindcss.com/docs/justify-self
       */
      "justify-self": [{
        "justify-self": ["auto", "start", "end", "center", "stretch"]
      }],
      /**
       * Align Content
       * @see https://tailwindcss.com/docs/align-content
       */
      "align-content": [{
        content: ["normal", ...getAlign(), "baseline"]
      }],
      /**
       * Align Items
       * @see https://tailwindcss.com/docs/align-items
       */
      "align-items": [{
        items: ["start", "end", "center", "baseline", "stretch"]
      }],
      /**
       * Align Self
       * @see https://tailwindcss.com/docs/align-self
       */
      "align-self": [{
        self: ["auto", "start", "end", "center", "stretch", "baseline"]
      }],
      /**
       * Place Content
       * @see https://tailwindcss.com/docs/place-content
       */
      "place-content": [{
        "place-content": [...getAlign(), "baseline"]
      }],
      /**
       * Place Items
       * @see https://tailwindcss.com/docs/place-items
       */
      "place-items": [{
        "place-items": ["start", "end", "center", "baseline", "stretch"]
      }],
      /**
       * Place Self
       * @see https://tailwindcss.com/docs/place-self
       */
      "place-self": [{
        "place-self": ["auto", "start", "end", "center", "stretch"]
      }],
      // Spacing
      /**
       * Padding
       * @see https://tailwindcss.com/docs/padding
       */
      p: [{
        p: [padding]
      }],
      /**
       * Padding X
       * @see https://tailwindcss.com/docs/padding
       */
      px: [{
        px: [padding]
      }],
      /**
       * Padding Y
       * @see https://tailwindcss.com/docs/padding
       */
      py: [{
        py: [padding]
      }],
      /**
       * Padding Start
       * @see https://tailwindcss.com/docs/padding
       */
      ps: [{
        ps: [padding]
      }],
      /**
       * Padding End
       * @see https://tailwindcss.com/docs/padding
       */
      pe: [{
        pe: [padding]
      }],
      /**
       * Padding Top
       * @see https://tailwindcss.com/docs/padding
       */
      pt: [{
        pt: [padding]
      }],
      /**
       * Padding Right
       * @see https://tailwindcss.com/docs/padding
       */
      pr: [{
        pr: [padding]
      }],
      /**
       * Padding Bottom
       * @see https://tailwindcss.com/docs/padding
       */
      pb: [{
        pb: [padding]
      }],
      /**
       * Padding Left
       * @see https://tailwindcss.com/docs/padding
       */
      pl: [{
        pl: [padding]
      }],
      /**
       * Margin
       * @see https://tailwindcss.com/docs/margin
       */
      m: [{
        m: [margin]
      }],
      /**
       * Margin X
       * @see https://tailwindcss.com/docs/margin
       */
      mx: [{
        mx: [margin]
      }],
      /**
       * Margin Y
       * @see https://tailwindcss.com/docs/margin
       */
      my: [{
        my: [margin]
      }],
      /**
       * Margin Start
       * @see https://tailwindcss.com/docs/margin
       */
      ms: [{
        ms: [margin]
      }],
      /**
       * Margin End
       * @see https://tailwindcss.com/docs/margin
       */
      me: [{
        me: [margin]
      }],
      /**
       * Margin Top
       * @see https://tailwindcss.com/docs/margin
       */
      mt: [{
        mt: [margin]
      }],
      /**
       * Margin Right
       * @see https://tailwindcss.com/docs/margin
       */
      mr: [{
        mr: [margin]
      }],
      /**
       * Margin Bottom
       * @see https://tailwindcss.com/docs/margin
       */
      mb: [{
        mb: [margin]
      }],
      /**
       * Margin Left
       * @see https://tailwindcss.com/docs/margin
       */
      ml: [{
        ml: [margin]
      }],
      /**
       * Space Between X
       * @see https://tailwindcss.com/docs/space
       */
      "space-x": [{
        "space-x": [space]
      }],
      /**
       * Space Between X Reverse
       * @see https://tailwindcss.com/docs/space
       */
      "space-x-reverse": ["space-x-reverse"],
      /**
       * Space Between Y
       * @see https://tailwindcss.com/docs/space
       */
      "space-y": [{
        "space-y": [space]
      }],
      /**
       * Space Between Y Reverse
       * @see https://tailwindcss.com/docs/space
       */
      "space-y-reverse": ["space-y-reverse"],
      // Sizing
      /**
       * Width
       * @see https://tailwindcss.com/docs/width
       */
      w: [{
        w: ["auto", "min", "max", "fit", "svw", "lvw", "dvw", isArbitraryValue, spacing]
      }],
      /**
       * Min-Width
       * @see https://tailwindcss.com/docs/min-width
       */
      "min-w": [{
        "min-w": [isArbitraryValue, spacing, "min", "max", "fit"]
      }],
      /**
       * Max-Width
       * @see https://tailwindcss.com/docs/max-width
       */
      "max-w": [{
        "max-w": [isArbitraryValue, spacing, "none", "full", "min", "max", "fit", "prose", {
          screen: [isTshirtSize]
        }, isTshirtSize]
      }],
      /**
       * Height
       * @see https://tailwindcss.com/docs/height
       */
      h: [{
        h: [isArbitraryValue, spacing, "auto", "min", "max", "fit", "svh", "lvh", "dvh"]
      }],
      /**
       * Min-Height
       * @see https://tailwindcss.com/docs/min-height
       */
      "min-h": [{
        "min-h": [isArbitraryValue, spacing, "min", "max", "fit", "svh", "lvh", "dvh"]
      }],
      /**
       * Max-Height
       * @see https://tailwindcss.com/docs/max-height
       */
      "max-h": [{
        "max-h": [isArbitraryValue, spacing, "min", "max", "fit", "svh", "lvh", "dvh"]
      }],
      /**
       * Size
       * @see https://tailwindcss.com/docs/size
       */
      size: [{
        size: [isArbitraryValue, spacing, "auto", "min", "max", "fit"]
      }],
      // Typography
      /**
       * Font Size
       * @see https://tailwindcss.com/docs/font-size
       */
      "font-size": [{
        text: ["base", isTshirtSize, isArbitraryLength]
      }],
      /**
       * Font Smoothing
       * @see https://tailwindcss.com/docs/font-smoothing
       */
      "font-smoothing": ["antialiased", "subpixel-antialiased"],
      /**
       * Font Style
       * @see https://tailwindcss.com/docs/font-style
       */
      "font-style": ["italic", "not-italic"],
      /**
       * Font Weight
       * @see https://tailwindcss.com/docs/font-weight
       */
      "font-weight": [{
        font: ["thin", "extralight", "light", "normal", "medium", "semibold", "bold", "extrabold", "black", isArbitraryNumber]
      }],
      /**
       * Font Family
       * @see https://tailwindcss.com/docs/font-family
       */
      "font-family": [{
        font: [isAny]
      }],
      /**
       * Font Variant Numeric
       * @see https://tailwindcss.com/docs/font-variant-numeric
       */
      "fvn-normal": ["normal-nums"],
      /**
       * Font Variant Numeric
       * @see https://tailwindcss.com/docs/font-variant-numeric
       */
      "fvn-ordinal": ["ordinal"],
      /**
       * Font Variant Numeric
       * @see https://tailwindcss.com/docs/font-variant-numeric
       */
      "fvn-slashed-zero": ["slashed-zero"],
      /**
       * Font Variant Numeric
       * @see https://tailwindcss.com/docs/font-variant-numeric
       */
      "fvn-figure": ["lining-nums", "oldstyle-nums"],
      /**
       * Font Variant Numeric
       * @see https://tailwindcss.com/docs/font-variant-numeric
       */
      "fvn-spacing": ["proportional-nums", "tabular-nums"],
      /**
       * Font Variant Numeric
       * @see https://tailwindcss.com/docs/font-variant-numeric
       */
      "fvn-fraction": ["diagonal-fractions", "stacked-fractons"],
      /**
       * Letter Spacing
       * @see https://tailwindcss.com/docs/letter-spacing
       */
      tracking: [{
        tracking: ["tighter", "tight", "normal", "wide", "wider", "widest", isArbitraryValue]
      }],
      /**
       * Line Clamp
       * @see https://tailwindcss.com/docs/line-clamp
       */
      "line-clamp": [{
        "line-clamp": ["none", isNumber, isArbitraryNumber]
      }],
      /**
       * Line Height
       * @see https://tailwindcss.com/docs/line-height
       */
      leading: [{
        leading: ["none", "tight", "snug", "normal", "relaxed", "loose", isLength, isArbitraryValue]
      }],
      /**
       * List Style Image
       * @see https://tailwindcss.com/docs/list-style-image
       */
      "list-image": [{
        "list-image": ["none", isArbitraryValue]
      }],
      /**
       * List Style Type
       * @see https://tailwindcss.com/docs/list-style-type
       */
      "list-style-type": [{
        list: ["none", "disc", "decimal", isArbitraryValue]
      }],
      /**
       * List Style Position
       * @see https://tailwindcss.com/docs/list-style-position
       */
      "list-style-position": [{
        list: ["inside", "outside"]
      }],
      /**
       * Placeholder Color
       * @deprecated since Tailwind CSS v3.0.0
       * @see https://tailwindcss.com/docs/placeholder-color
       */
      "placeholder-color": [{
        placeholder: [colors]
      }],
      /**
       * Placeholder Opacity
       * @see https://tailwindcss.com/docs/placeholder-opacity
       */
      "placeholder-opacity": [{
        "placeholder-opacity": [opacity]
      }],
      /**
       * Text Alignment
       * @see https://tailwindcss.com/docs/text-align
       */
      "text-alignment": [{
        text: ["left", "center", "right", "justify", "start", "end"]
      }],
      /**
       * Text Color
       * @see https://tailwindcss.com/docs/text-color
       */
      "text-color": [{
        text: [colors]
      }],
      /**
       * Text Opacity
       * @see https://tailwindcss.com/docs/text-opacity
       */
      "text-opacity": [{
        "text-opacity": [opacity]
      }],
      /**
       * Text Decoration
       * @see https://tailwindcss.com/docs/text-decoration
       */
      "text-decoration": ["underline", "overline", "line-through", "no-underline"],
      /**
       * Text Decoration Style
       * @see https://tailwindcss.com/docs/text-decoration-style
       */
      "text-decoration-style": [{
        decoration: [...getLineStyles(), "wavy"]
      }],
      /**
       * Text Decoration Thickness
       * @see https://tailwindcss.com/docs/text-decoration-thickness
       */
      "text-decoration-thickness": [{
        decoration: ["auto", "from-font", isLength, isArbitraryLength]
      }],
      /**
       * Text Underline Offset
       * @see https://tailwindcss.com/docs/text-underline-offset
       */
      "underline-offset": [{
        "underline-offset": ["auto", isLength, isArbitraryValue]
      }],
      /**
       * Text Decoration Color
       * @see https://tailwindcss.com/docs/text-decoration-color
       */
      "text-decoration-color": [{
        decoration: [colors]
      }],
      /**
       * Text Transform
       * @see https://tailwindcss.com/docs/text-transform
       */
      "text-transform": ["uppercase", "lowercase", "capitalize", "normal-case"],
      /**
       * Text Overflow
       * @see https://tailwindcss.com/docs/text-overflow
       */
      "text-overflow": ["truncate", "text-ellipsis", "text-clip"],
      /**
       * Text Wrap
       * @see https://tailwindcss.com/docs/text-wrap
       */
      "text-wrap": [{
        text: ["wrap", "nowrap", "balance", "pretty"]
      }],
      /**
       * Text Indent
       * @see https://tailwindcss.com/docs/text-indent
       */
      indent: [{
        indent: getSpacingWithArbitrary()
      }],
      /**
       * Vertical Alignment
       * @see https://tailwindcss.com/docs/vertical-align
       */
      "vertical-align": [{
        align: ["baseline", "top", "middle", "bottom", "text-top", "text-bottom", "sub", "super", isArbitraryValue]
      }],
      /**
       * Whitespace
       * @see https://tailwindcss.com/docs/whitespace
       */
      whitespace: [{
        whitespace: ["normal", "nowrap", "pre", "pre-line", "pre-wrap", "break-spaces"]
      }],
      /**
       * Word Break
       * @see https://tailwindcss.com/docs/word-break
       */
      break: [{
        break: ["normal", "words", "all", "keep"]
      }],
      /**
       * Hyphens
       * @see https://tailwindcss.com/docs/hyphens
       */
      hyphens: [{
        hyphens: ["none", "manual", "auto"]
      }],
      /**
       * Content
       * @see https://tailwindcss.com/docs/content
       */
      content: [{
        content: ["none", isArbitraryValue]
      }],
      // Backgrounds
      /**
       * Background Attachment
       * @see https://tailwindcss.com/docs/background-attachment
       */
      "bg-attachment": [{
        bg: ["fixed", "local", "scroll"]
      }],
      /**
       * Background Clip
       * @see https://tailwindcss.com/docs/background-clip
       */
      "bg-clip": [{
        "bg-clip": ["border", "padding", "content", "text"]
      }],
      /**
       * Background Opacity
       * @deprecated since Tailwind CSS v3.0.0
       * @see https://tailwindcss.com/docs/background-opacity
       */
      "bg-opacity": [{
        "bg-opacity": [opacity]
      }],
      /**
       * Background Origin
       * @see https://tailwindcss.com/docs/background-origin
       */
      "bg-origin": [{
        "bg-origin": ["border", "padding", "content"]
      }],
      /**
       * Background Position
       * @see https://tailwindcss.com/docs/background-position
       */
      "bg-position": [{
        bg: [...getPositions(), isArbitraryPosition]
      }],
      /**
       * Background Repeat
       * @see https://tailwindcss.com/docs/background-repeat
       */
      "bg-repeat": [{
        bg: ["no-repeat", {
          repeat: ["", "x", "y", "round", "space"]
        }]
      }],
      /**
       * Background Size
       * @see https://tailwindcss.com/docs/background-size
       */
      "bg-size": [{
        bg: ["auto", "cover", "contain", isArbitrarySize]
      }],
      /**
       * Background Image
       * @see https://tailwindcss.com/docs/background-image
       */
      "bg-image": [{
        bg: ["none", {
          "gradient-to": ["t", "tr", "r", "br", "b", "bl", "l", "tl"]
        }, isArbitraryImage]
      }],
      /**
       * Background Color
       * @see https://tailwindcss.com/docs/background-color
       */
      "bg-color": [{
        bg: [colors]
      }],
      /**
       * Gradient Color Stops From Position
       * @see https://tailwindcss.com/docs/gradient-color-stops
       */
      "gradient-from-pos": [{
        from: [gradientColorStopPositions]
      }],
      /**
       * Gradient Color Stops Via Position
       * @see https://tailwindcss.com/docs/gradient-color-stops
       */
      "gradient-via-pos": [{
        via: [gradientColorStopPositions]
      }],
      /**
       * Gradient Color Stops To Position
       * @see https://tailwindcss.com/docs/gradient-color-stops
       */
      "gradient-to-pos": [{
        to: [gradientColorStopPositions]
      }],
      /**
       * Gradient Color Stops From
       * @see https://tailwindcss.com/docs/gradient-color-stops
       */
      "gradient-from": [{
        from: [gradientColorStops]
      }],
      /**
       * Gradient Color Stops Via
       * @see https://tailwindcss.com/docs/gradient-color-stops
       */
      "gradient-via": [{
        via: [gradientColorStops]
      }],
      /**
       * Gradient Color Stops To
       * @see https://tailwindcss.com/docs/gradient-color-stops
       */
      "gradient-to": [{
        to: [gradientColorStops]
      }],
      // Borders
      /**
       * Border Radius
       * @see https://tailwindcss.com/docs/border-radius
       */
      rounded: [{
        rounded: [borderRadius]
      }],
      /**
       * Border Radius Start
       * @see https://tailwindcss.com/docs/border-radius
       */
      "rounded-s": [{
        "rounded-s": [borderRadius]
      }],
      /**
       * Border Radius End
       * @see https://tailwindcss.com/docs/border-radius
       */
      "rounded-e": [{
        "rounded-e": [borderRadius]
      }],
      /**
       * Border Radius Top
       * @see https://tailwindcss.com/docs/border-radius
       */
      "rounded-t": [{
        "rounded-t": [borderRadius]
      }],
      /**
       * Border Radius Right
       * @see https://tailwindcss.com/docs/border-radius
       */
      "rounded-r": [{
        "rounded-r": [borderRadius]
      }],
      /**
       * Border Radius Bottom
       * @see https://tailwindcss.com/docs/border-radius
       */
      "rounded-b": [{
        "rounded-b": [borderRadius]
      }],
      /**
       * Border Radius Left
       * @see https://tailwindcss.com/docs/border-radius
       */
      "rounded-l": [{
        "rounded-l": [borderRadius]
      }],
      /**
       * Border Radius Start Start
       * @see https://tailwindcss.com/docs/border-radius
       */
      "rounded-ss": [{
        "rounded-ss": [borderRadius]
      }],
      /**
       * Border Radius Start End
       * @see https://tailwindcss.com/docs/border-radius
       */
      "rounded-se": [{
        "rounded-se": [borderRadius]
      }],
      /**
       * Border Radius End End
       * @see https://tailwindcss.com/docs/border-radius
       */
      "rounded-ee": [{
        "rounded-ee": [borderRadius]
      }],
      /**
       * Border Radius End Start
       * @see https://tailwindcss.com/docs/border-radius
       */
      "rounded-es": [{
        "rounded-es": [borderRadius]
      }],
      /**
       * Border Radius Top Left
       * @see https://tailwindcss.com/docs/border-radius
       */
      "rounded-tl": [{
        "rounded-tl": [borderRadius]
      }],
      /**
       * Border Radius Top Right
       * @see https://tailwindcss.com/docs/border-radius
       */
      "rounded-tr": [{
        "rounded-tr": [borderRadius]
      }],
      /**
       * Border Radius Bottom Right
       * @see https://tailwindcss.com/docs/border-radius
       */
      "rounded-br": [{
        "rounded-br": [borderRadius]
      }],
      /**
       * Border Radius Bottom Left
       * @see https://tailwindcss.com/docs/border-radius
       */
      "rounded-bl": [{
        "rounded-bl": [borderRadius]
      }],
      /**
       * Border Width
       * @see https://tailwindcss.com/docs/border-width
       */
      "border-w": [{
        border: [borderWidth]
      }],
      /**
       * Border Width X
       * @see https://tailwindcss.com/docs/border-width
       */
      "border-w-x": [{
        "border-x": [borderWidth]
      }],
      /**
       * Border Width Y
       * @see https://tailwindcss.com/docs/border-width
       */
      "border-w-y": [{
        "border-y": [borderWidth]
      }],
      /**
       * Border Width Start
       * @see https://tailwindcss.com/docs/border-width
       */
      "border-w-s": [{
        "border-s": [borderWidth]
      }],
      /**
       * Border Width End
       * @see https://tailwindcss.com/docs/border-width
       */
      "border-w-e": [{
        "border-e": [borderWidth]
      }],
      /**
       * Border Width Top
       * @see https://tailwindcss.com/docs/border-width
       */
      "border-w-t": [{
        "border-t": [borderWidth]
      }],
      /**
       * Border Width Right
       * @see https://tailwindcss.com/docs/border-width
       */
      "border-w-r": [{
        "border-r": [borderWidth]
      }],
      /**
       * Border Width Bottom
       * @see https://tailwindcss.com/docs/border-width
       */
      "border-w-b": [{
        "border-b": [borderWidth]
      }],
      /**
       * Border Width Left
       * @see https://tailwindcss.com/docs/border-width
       */
      "border-w-l": [{
        "border-l": [borderWidth]
      }],
      /**
       * Border Opacity
       * @see https://tailwindcss.com/docs/border-opacity
       */
      "border-opacity": [{
        "border-opacity": [opacity]
      }],
      /**
       * Border Style
       * @see https://tailwindcss.com/docs/border-style
       */
      "border-style": [{
        border: [...getLineStyles(), "hidden"]
      }],
      /**
       * Divide Width X
       * @see https://tailwindcss.com/docs/divide-width
       */
      "divide-x": [{
        "divide-x": [borderWidth]
      }],
      /**
       * Divide Width X Reverse
       * @see https://tailwindcss.com/docs/divide-width
       */
      "divide-x-reverse": ["divide-x-reverse"],
      /**
       * Divide Width Y
       * @see https://tailwindcss.com/docs/divide-width
       */
      "divide-y": [{
        "divide-y": [borderWidth]
      }],
      /**
       * Divide Width Y Reverse
       * @see https://tailwindcss.com/docs/divide-width
       */
      "divide-y-reverse": ["divide-y-reverse"],
      /**
       * Divide Opacity
       * @see https://tailwindcss.com/docs/divide-opacity
       */
      "divide-opacity": [{
        "divide-opacity": [opacity]
      }],
      /**
       * Divide Style
       * @see https://tailwindcss.com/docs/divide-style
       */
      "divide-style": [{
        divide: getLineStyles()
      }],
      /**
       * Border Color
       * @see https://tailwindcss.com/docs/border-color
       */
      "border-color": [{
        border: [borderColor]
      }],
      /**
       * Border Color X
       * @see https://tailwindcss.com/docs/border-color
       */
      "border-color-x": [{
        "border-x": [borderColor]
      }],
      /**
       * Border Color Y
       * @see https://tailwindcss.com/docs/border-color
       */
      "border-color-y": [{
        "border-y": [borderColor]
      }],
      /**
       * Border Color S
       * @see https://tailwindcss.com/docs/border-color
       */
      "border-color-s": [{
        "border-s": [borderColor]
      }],
      /**
       * Border Color E
       * @see https://tailwindcss.com/docs/border-color
       */
      "border-color-e": [{
        "border-e": [borderColor]
      }],
      /**
       * Border Color Top
       * @see https://tailwindcss.com/docs/border-color
       */
      "border-color-t": [{
        "border-t": [borderColor]
      }],
      /**
       * Border Color Right
       * @see https://tailwindcss.com/docs/border-color
       */
      "border-color-r": [{
        "border-r": [borderColor]
      }],
      /**
       * Border Color Bottom
       * @see https://tailwindcss.com/docs/border-color
       */
      "border-color-b": [{
        "border-b": [borderColor]
      }],
      /**
       * Border Color Left
       * @see https://tailwindcss.com/docs/border-color
       */
      "border-color-l": [{
        "border-l": [borderColor]
      }],
      /**
       * Divide Color
       * @see https://tailwindcss.com/docs/divide-color
       */
      "divide-color": [{
        divide: [borderColor]
      }],
      /**
       * Outline Style
       * @see https://tailwindcss.com/docs/outline-style
       */
      "outline-style": [{
        outline: ["", ...getLineStyles()]
      }],
      /**
       * Outline Offset
       * @see https://tailwindcss.com/docs/outline-offset
       */
      "outline-offset": [{
        "outline-offset": [isLength, isArbitraryValue]
      }],
      /**
       * Outline Width
       * @see https://tailwindcss.com/docs/outline-width
       */
      "outline-w": [{
        outline: [isLength, isArbitraryLength]
      }],
      /**
       * Outline Color
       * @see https://tailwindcss.com/docs/outline-color
       */
      "outline-color": [{
        outline: [colors]
      }],
      /**
       * Ring Width
       * @see https://tailwindcss.com/docs/ring-width
       */
      "ring-w": [{
        ring: getLengthWithEmptyAndArbitrary()
      }],
      /**
       * Ring Width Inset
       * @see https://tailwindcss.com/docs/ring-width
       */
      "ring-w-inset": ["ring-inset"],
      /**
       * Ring Color
       * @see https://tailwindcss.com/docs/ring-color
       */
      "ring-color": [{
        ring: [colors]
      }],
      /**
       * Ring Opacity
       * @see https://tailwindcss.com/docs/ring-opacity
       */
      "ring-opacity": [{
        "ring-opacity": [opacity]
      }],
      /**
       * Ring Offset Width
       * @see https://tailwindcss.com/docs/ring-offset-width
       */
      "ring-offset-w": [{
        "ring-offset": [isLength, isArbitraryLength]
      }],
      /**
       * Ring Offset Color
       * @see https://tailwindcss.com/docs/ring-offset-color
       */
      "ring-offset-color": [{
        "ring-offset": [colors]
      }],
      // Effects
      /**
       * Box Shadow
       * @see https://tailwindcss.com/docs/box-shadow
       */
      shadow: [{
        shadow: ["", "inner", "none", isTshirtSize, isArbitraryShadow]
      }],
      /**
       * Box Shadow Color
       * @see https://tailwindcss.com/docs/box-shadow-color
       */
      "shadow-color": [{
        shadow: [isAny]
      }],
      /**
       * Opacity
       * @see https://tailwindcss.com/docs/opacity
       */
      opacity: [{
        opacity: [opacity]
      }],
      /**
       * Mix Blend Mode
       * @see https://tailwindcss.com/docs/mix-blend-mode
       */
      "mix-blend": [{
        "mix-blend": [...getBlendModes(), "plus-lighter", "plus-darker"]
      }],
      /**
       * Background Blend Mode
       * @see https://tailwindcss.com/docs/background-blend-mode
       */
      "bg-blend": [{
        "bg-blend": getBlendModes()
      }],
      // Filters
      /**
       * Filter
       * @deprecated since Tailwind CSS v3.0.0
       * @see https://tailwindcss.com/docs/filter
       */
      filter: [{
        filter: ["", "none"]
      }],
      /**
       * Blur
       * @see https://tailwindcss.com/docs/blur
       */
      blur: [{
        blur: [blur]
      }],
      /**
       * Brightness
       * @see https://tailwindcss.com/docs/brightness
       */
      brightness: [{
        brightness: [brightness]
      }],
      /**
       * Contrast
       * @see https://tailwindcss.com/docs/contrast
       */
      contrast: [{
        contrast: [contrast]
      }],
      /**
       * Drop Shadow
       * @see https://tailwindcss.com/docs/drop-shadow
       */
      "drop-shadow": [{
        "drop-shadow": ["", "none", isTshirtSize, isArbitraryValue]
      }],
      /**
       * Grayscale
       * @see https://tailwindcss.com/docs/grayscale
       */
      grayscale: [{
        grayscale: [grayscale]
      }],
      /**
       * Hue Rotate
       * @see https://tailwindcss.com/docs/hue-rotate
       */
      "hue-rotate": [{
        "hue-rotate": [hueRotate]
      }],
      /**
       * Invert
       * @see https://tailwindcss.com/docs/invert
       */
      invert: [{
        invert: [invert]
      }],
      /**
       * Saturate
       * @see https://tailwindcss.com/docs/saturate
       */
      saturate: [{
        saturate: [saturate]
      }],
      /**
       * Sepia
       * @see https://tailwindcss.com/docs/sepia
       */
      sepia: [{
        sepia: [sepia]
      }],
      /**
       * Backdrop Filter
       * @deprecated since Tailwind CSS v3.0.0
       * @see https://tailwindcss.com/docs/backdrop-filter
       */
      "backdrop-filter": [{
        "backdrop-filter": ["", "none"]
      }],
      /**
       * Backdrop Blur
       * @see https://tailwindcss.com/docs/backdrop-blur
       */
      "backdrop-blur": [{
        "backdrop-blur": [blur]
      }],
      /**
       * Backdrop Brightness
       * @see https://tailwindcss.com/docs/backdrop-brightness
       */
      "backdrop-brightness": [{
        "backdrop-brightness": [brightness]
      }],
      /**
       * Backdrop Contrast
       * @see https://tailwindcss.com/docs/backdrop-contrast
       */
      "backdrop-contrast": [{
        "backdrop-contrast": [contrast]
      }],
      /**
       * Backdrop Grayscale
       * @see https://tailwindcss.com/docs/backdrop-grayscale
       */
      "backdrop-grayscale": [{
        "backdrop-grayscale": [grayscale]
      }],
      /**
       * Backdrop Hue Rotate
       * @see https://tailwindcss.com/docs/backdrop-hue-rotate
       */
      "backdrop-hue-rotate": [{
        "backdrop-hue-rotate": [hueRotate]
      }],
      /**
       * Backdrop Invert
       * @see https://tailwindcss.com/docs/backdrop-invert
       */
      "backdrop-invert": [{
        "backdrop-invert": [invert]
      }],
      /**
       * Backdrop Opacity
       * @see https://tailwindcss.com/docs/backdrop-opacity
       */
      "backdrop-opacity": [{
        "backdrop-opacity": [opacity]
      }],
      /**
       * Backdrop Saturate
       * @see https://tailwindcss.com/docs/backdrop-saturate
       */
      "backdrop-saturate": [{
        "backdrop-saturate": [saturate]
      }],
      /**
       * Backdrop Sepia
       * @see https://tailwindcss.com/docs/backdrop-sepia
       */
      "backdrop-sepia": [{
        "backdrop-sepia": [sepia]
      }],
      // Tables
      /**
       * Border Collapse
       * @see https://tailwindcss.com/docs/border-collapse
       */
      "border-collapse": [{
        border: ["collapse", "separate"]
      }],
      /**
       * Border Spacing
       * @see https://tailwindcss.com/docs/border-spacing
       */
      "border-spacing": [{
        "border-spacing": [borderSpacing]
      }],
      /**
       * Border Spacing X
       * @see https://tailwindcss.com/docs/border-spacing
       */
      "border-spacing-x": [{
        "border-spacing-x": [borderSpacing]
      }],
      /**
       * Border Spacing Y
       * @see https://tailwindcss.com/docs/border-spacing
       */
      "border-spacing-y": [{
        "border-spacing-y": [borderSpacing]
      }],
      /**
       * Table Layout
       * @see https://tailwindcss.com/docs/table-layout
       */
      "table-layout": [{
        table: ["auto", "fixed"]
      }],
      /**
       * Caption Side
       * @see https://tailwindcss.com/docs/caption-side
       */
      caption: [{
        caption: ["top", "bottom"]
      }],
      // Transitions and Animation
      /**
       * Tranisition Property
       * @see https://tailwindcss.com/docs/transition-property
       */
      transition: [{
        transition: ["none", "all", "", "colors", "opacity", "shadow", "transform", isArbitraryValue]
      }],
      /**
       * Transition Duration
       * @see https://tailwindcss.com/docs/transition-duration
       */
      duration: [{
        duration: getNumberAndArbitrary()
      }],
      /**
       * Transition Timing Function
       * @see https://tailwindcss.com/docs/transition-timing-function
       */
      ease: [{
        ease: ["linear", "in", "out", "in-out", isArbitraryValue]
      }],
      /**
       * Transition Delay
       * @see https://tailwindcss.com/docs/transition-delay
       */
      delay: [{
        delay: getNumberAndArbitrary()
      }],
      /**
       * Animation
       * @see https://tailwindcss.com/docs/animation
       */
      animate: [{
        animate: ["none", "spin", "ping", "pulse", "bounce", isArbitraryValue]
      }],
      // Transforms
      /**
       * Transform
       * @see https://tailwindcss.com/docs/transform
       */
      transform: [{
        transform: ["", "gpu", "none"]
      }],
      /**
       * Scale
       * @see https://tailwindcss.com/docs/scale
       */
      scale: [{
        scale: [scale]
      }],
      /**
       * Scale X
       * @see https://tailwindcss.com/docs/scale
       */
      "scale-x": [{
        "scale-x": [scale]
      }],
      /**
       * Scale Y
       * @see https://tailwindcss.com/docs/scale
       */
      "scale-y": [{
        "scale-y": [scale]
      }],
      /**
       * Rotate
       * @see https://tailwindcss.com/docs/rotate
       */
      rotate: [{
        rotate: [isInteger, isArbitraryValue]
      }],
      /**
       * Translate X
       * @see https://tailwindcss.com/docs/translate
       */
      "translate-x": [{
        "translate-x": [translate]
      }],
      /**
       * Translate Y
       * @see https://tailwindcss.com/docs/translate
       */
      "translate-y": [{
        "translate-y": [translate]
      }],
      /**
       * Skew X
       * @see https://tailwindcss.com/docs/skew
       */
      "skew-x": [{
        "skew-x": [skew]
      }],
      /**
       * Skew Y
       * @see https://tailwindcss.com/docs/skew
       */
      "skew-y": [{
        "skew-y": [skew]
      }],
      /**
       * Transform Origin
       * @see https://tailwindcss.com/docs/transform-origin
       */
      "transform-origin": [{
        origin: ["center", "top", "top-right", "right", "bottom-right", "bottom", "bottom-left", "left", "top-left", isArbitraryValue]
      }],
      // Interactivity
      /**
       * Accent Color
       * @see https://tailwindcss.com/docs/accent-color
       */
      accent: [{
        accent: ["auto", colors]
      }],
      /**
       * Appearance
       * @see https://tailwindcss.com/docs/appearance
       */
      appearance: [{
        appearance: ["none", "auto"]
      }],
      /**
       * Cursor
       * @see https://tailwindcss.com/docs/cursor
       */
      cursor: [{
        cursor: ["auto", "default", "pointer", "wait", "text", "move", "help", "not-allowed", "none", "context-menu", "progress", "cell", "crosshair", "vertical-text", "alias", "copy", "no-drop", "grab", "grabbing", "all-scroll", "col-resize", "row-resize", "n-resize", "e-resize", "s-resize", "w-resize", "ne-resize", "nw-resize", "se-resize", "sw-resize", "ew-resize", "ns-resize", "nesw-resize", "nwse-resize", "zoom-in", "zoom-out", isArbitraryValue]
      }],
      /**
       * Caret Color
       * @see https://tailwindcss.com/docs/just-in-time-mode#caret-color-utilities
       */
      "caret-color": [{
        caret: [colors]
      }],
      /**
       * Pointer Events
       * @see https://tailwindcss.com/docs/pointer-events
       */
      "pointer-events": [{
        "pointer-events": ["none", "auto"]
      }],
      /**
       * Resize
       * @see https://tailwindcss.com/docs/resize
       */
      resize: [{
        resize: ["none", "y", "x", ""]
      }],
      /**
       * Scroll Behavior
       * @see https://tailwindcss.com/docs/scroll-behavior
       */
      "scroll-behavior": [{
        scroll: ["auto", "smooth"]
      }],
      /**
       * Scroll Margin
       * @see https://tailwindcss.com/docs/scroll-margin
       */
      "scroll-m": [{
        "scroll-m": getSpacingWithArbitrary()
      }],
      /**
       * Scroll Margin X
       * @see https://tailwindcss.com/docs/scroll-margin
       */
      "scroll-mx": [{
        "scroll-mx": getSpacingWithArbitrary()
      }],
      /**
       * Scroll Margin Y
       * @see https://tailwindcss.com/docs/scroll-margin
       */
      "scroll-my": [{
        "scroll-my": getSpacingWithArbitrary()
      }],
      /**
       * Scroll Margin Start
       * @see https://tailwindcss.com/docs/scroll-margin
       */
      "scroll-ms": [{
        "scroll-ms": getSpacingWithArbitrary()
      }],
      /**
       * Scroll Margin End
       * @see https://tailwindcss.com/docs/scroll-margin
       */
      "scroll-me": [{
        "scroll-me": getSpacingWithArbitrary()
      }],
      /**
       * Scroll Margin Top
       * @see https://tailwindcss.com/docs/scroll-margin
       */
      "scroll-mt": [{
        "scroll-mt": getSpacingWithArbitrary()
      }],
      /**
       * Scroll Margin Right
       * @see https://tailwindcss.com/docs/scroll-margin
       */
      "scroll-mr": [{
        "scroll-mr": getSpacingWithArbitrary()
      }],
      /**
       * Scroll Margin Bottom
       * @see https://tailwindcss.com/docs/scroll-margin
       */
      "scroll-mb": [{
        "scroll-mb": getSpacingWithArbitrary()
      }],
      /**
       * Scroll Margin Left
       * @see https://tailwindcss.com/docs/scroll-margin
       */
      "scroll-ml": [{
        "scroll-ml": getSpacingWithArbitrary()
      }],
      /**
       * Scroll Padding
       * @see https://tailwindcss.com/docs/scroll-padding
       */
      "scroll-p": [{
        "scroll-p": getSpacingWithArbitrary()
      }],
      /**
       * Scroll Padding X
       * @see https://tailwindcss.com/docs/scroll-padding
       */
      "scroll-px": [{
        "scroll-px": getSpacingWithArbitrary()
      }],
      /**
       * Scroll Padding Y
       * @see https://tailwindcss.com/docs/scroll-padding
       */
      "scroll-py": [{
        "scroll-py": getSpacingWithArbitrary()
      }],
      /**
       * Scroll Padding Start
       * @see https://tailwindcss.com/docs/scroll-padding
       */
      "scroll-ps": [{
        "scroll-ps": getSpacingWithArbitrary()
      }],
      /**
       * Scroll Padding End
       * @see https://tailwindcss.com/docs/scroll-padding
       */
      "scroll-pe": [{
        "scroll-pe": getSpacingWithArbitrary()
      }],
      /**
       * Scroll Padding Top
       * @see https://tailwindcss.com/docs/scroll-padding
       */
      "scroll-pt": [{
        "scroll-pt": getSpacingWithArbitrary()
      }],
      /**
       * Scroll Padding Right
       * @see https://tailwindcss.com/docs/scroll-padding
       */
      "scroll-pr": [{
        "scroll-pr": getSpacingWithArbitrary()
      }],
      /**
       * Scroll Padding Bottom
       * @see https://tailwindcss.com/docs/scroll-padding
       */
      "scroll-pb": [{
        "scroll-pb": getSpacingWithArbitrary()
      }],
      /**
       * Scroll Padding Left
       * @see https://tailwindcss.com/docs/scroll-padding
       */
      "scroll-pl": [{
        "scroll-pl": getSpacingWithArbitrary()
      }],
      /**
       * Scroll Snap Align
       * @see https://tailwindcss.com/docs/scroll-snap-align
       */
      "snap-align": [{
        snap: ["start", "end", "center", "align-none"]
      }],
      /**
       * Scroll Snap Stop
       * @see https://tailwindcss.com/docs/scroll-snap-stop
       */
      "snap-stop": [{
        snap: ["normal", "always"]
      }],
      /**
       * Scroll Snap Type
       * @see https://tailwindcss.com/docs/scroll-snap-type
       */
      "snap-type": [{
        snap: ["none", "x", "y", "both"]
      }],
      /**
       * Scroll Snap Type Strictness
       * @see https://tailwindcss.com/docs/scroll-snap-type
       */
      "snap-strictness": [{
        snap: ["mandatory", "proximity"]
      }],
      /**
       * Touch Action
       * @see https://tailwindcss.com/docs/touch-action
       */
      touch: [{
        touch: ["auto", "none", "manipulation"]
      }],
      /**
       * Touch Action X
       * @see https://tailwindcss.com/docs/touch-action
       */
      "touch-x": [{
        "touch-pan": ["x", "left", "right"]
      }],
      /**
       * Touch Action Y
       * @see https://tailwindcss.com/docs/touch-action
       */
      "touch-y": [{
        "touch-pan": ["y", "up", "down"]
      }],
      /**
       * Touch Action Pinch Zoom
       * @see https://tailwindcss.com/docs/touch-action
       */
      "touch-pz": ["touch-pinch-zoom"],
      /**
       * User Select
       * @see https://tailwindcss.com/docs/user-select
       */
      select: [{
        select: ["none", "text", "all", "auto"]
      }],
      /**
       * Will Change
       * @see https://tailwindcss.com/docs/will-change
       */
      "will-change": [{
        "will-change": ["auto", "scroll", "contents", "transform", isArbitraryValue]
      }],
      // SVG
      /**
       * Fill
       * @see https://tailwindcss.com/docs/fill
       */
      fill: [{
        fill: [colors, "none"]
      }],
      /**
       * Stroke Width
       * @see https://tailwindcss.com/docs/stroke-width
       */
      "stroke-w": [{
        stroke: [isLength, isArbitraryLength, isArbitraryNumber]
      }],
      /**
       * Stroke
       * @see https://tailwindcss.com/docs/stroke
       */
      stroke: [{
        stroke: [colors, "none"]
      }],
      // Accessibility
      /**
       * Screen Readers
       * @see https://tailwindcss.com/docs/screen-readers
       */
      sr: ["sr-only", "not-sr-only"],
      /**
       * Forced Color Adjust
       * @see https://tailwindcss.com/docs/forced-color-adjust
       */
      "forced-color-adjust": [{
        "forced-color-adjust": ["auto", "none"]
      }]
    },
    conflictingClassGroups: {
      overflow: ["overflow-x", "overflow-y"],
      overscroll: ["overscroll-x", "overscroll-y"],
      inset: ["inset-x", "inset-y", "start", "end", "top", "right", "bottom", "left"],
      "inset-x": ["right", "left"],
      "inset-y": ["top", "bottom"],
      flex: ["basis", "grow", "shrink"],
      gap: ["gap-x", "gap-y"],
      p: ["px", "py", "ps", "pe", "pt", "pr", "pb", "pl"],
      px: ["pr", "pl"],
      py: ["pt", "pb"],
      m: ["mx", "my", "ms", "me", "mt", "mr", "mb", "ml"],
      mx: ["mr", "ml"],
      my: ["mt", "mb"],
      size: ["w", "h"],
      "font-size": ["leading"],
      "fvn-normal": ["fvn-ordinal", "fvn-slashed-zero", "fvn-figure", "fvn-spacing", "fvn-fraction"],
      "fvn-ordinal": ["fvn-normal"],
      "fvn-slashed-zero": ["fvn-normal"],
      "fvn-figure": ["fvn-normal"],
      "fvn-spacing": ["fvn-normal"],
      "fvn-fraction": ["fvn-normal"],
      "line-clamp": ["display", "overflow"],
      rounded: ["rounded-s", "rounded-e", "rounded-t", "rounded-r", "rounded-b", "rounded-l", "rounded-ss", "rounded-se", "rounded-ee", "rounded-es", "rounded-tl", "rounded-tr", "rounded-br", "rounded-bl"],
      "rounded-s": ["rounded-ss", "rounded-es"],
      "rounded-e": ["rounded-se", "rounded-ee"],
      "rounded-t": ["rounded-tl", "rounded-tr"],
      "rounded-r": ["rounded-tr", "rounded-br"],
      "rounded-b": ["rounded-br", "rounded-bl"],
      "rounded-l": ["rounded-tl", "rounded-bl"],
      "border-spacing": ["border-spacing-x", "border-spacing-y"],
      "border-w": ["border-w-s", "border-w-e", "border-w-t", "border-w-r", "border-w-b", "border-w-l"],
      "border-w-x": ["border-w-r", "border-w-l"],
      "border-w-y": ["border-w-t", "border-w-b"],
      "border-color": ["border-color-s", "border-color-e", "border-color-t", "border-color-r", "border-color-b", "border-color-l"],
      "border-color-x": ["border-color-r", "border-color-l"],
      "border-color-y": ["border-color-t", "border-color-b"],
      "scroll-m": ["scroll-mx", "scroll-my", "scroll-ms", "scroll-me", "scroll-mt", "scroll-mr", "scroll-mb", "scroll-ml"],
      "scroll-mx": ["scroll-mr", "scroll-ml"],
      "scroll-my": ["scroll-mt", "scroll-mb"],
      "scroll-p": ["scroll-px", "scroll-py", "scroll-ps", "scroll-pe", "scroll-pt", "scroll-pr", "scroll-pb", "scroll-pl"],
      "scroll-px": ["scroll-pr", "scroll-pl"],
      "scroll-py": ["scroll-pt", "scroll-pb"],
      touch: ["touch-x", "touch-y", "touch-pz"],
      "touch-x": ["touch"],
      "touch-y": ["touch"],
      "touch-pz": ["touch"]
    },
    conflictingClassGroupModifiers: {
      "font-size": ["leading"]
    }
  };
};
var twMerge = createTailwindMerge(getDefaultConfig);

// node_modules/@abak/react-image-picker/dist/module.js
var $5c76e880aa53a055$export$84584c2a98eb6753 = {
  drag_drop_hint: "To select image click here or Drag and Drop image over here.",
  select_image: "Select image",
  preview_image_modal_title: "Preview Image"
};
var $110ce5a7fdc375a0$export$48a262eaf0aadda2 = {
  drag_drop_hint: "برای انتخاب عکس کلیک کنید یا عکس را به اینجا بکشید",
  select_image: "انتخاب عکس",
  preview_image_modal_title: "مشاهده تصویر"
};
var $190a8be343b4b13e$export$b1da5abff9d0406 = (0, import_react.createContext)({});
var $190a8be343b4b13e$export$2881499e37b75b9a = ({ children, ...props }) => {
  const locales = {
    en: $5c76e880aa53a055$export$84584c2a98eb6753,
    fa: $110ce5a7fdc375a0$export$48a262eaf0aadda2
  };
  return (0, import_jsx_dev_runtime.jsxDEV)($190a8be343b4b13e$export$b1da5abff9d0406.Provider, {
    value: {
      ...props,
      locale: Object.assign({}, typeof props.locale == "string" ? locales[props.locale] || locales.en : locales.en, props.locale),
      rtl: props.rtl || props.locale == "fa"
    },
    children
  }, void 0, false, {
    fileName: "src/provider/provider.tsx",
    lineNumber: 20,
    columnNumber: 5
  }, void 0);
};
var $fab42eb3dee39b5b$export$a0781c1cbbc5fc36 = (file) => `${file.name}_${file.size}`;
var $fab42eb3dee39b5b$export$37db6582fd067b92 = (files, newfiles) => newfiles.filter((_file) => !files.some((__file) => $fab42eb3dee39b5b$export$a0781c1cbbc5fc36(_file) == $fab42eb3dee39b5b$export$a0781c1cbbc5fc36(__file)));
var $fab42eb3dee39b5b$export$63b087218d043c45 = (configs) => {
  var _a;
  return configs.files.length + ~~((_a = configs.images) == null ? void 0 : _a.length);
};
var $fab42eb3dee39b5b$export$34bc97de79737939 = (configs) => {
  var _a, _b;
  return (!!configs.files.length || !!((_a = configs.images) == null ? void 0 : _a.length)) && !configs.multiple && typeof configs.limit == "undefined" || typeof configs.limit == "number" && (configs.files.length >= configs.limit || (((_b = configs.images) == null ? void 0 : _b.length) || 0) >= configs.limit);
};
var $843874b66901ca92$export$b3f7d4725397d87e = (props) => {
  const configs = (0, import_react.useContext)((0, $190a8be343b4b13e$export$b1da5abff9d0406));
  const selectedSum = (0, import_react.useMemo)(() => (0, $fab42eb3dee39b5b$export$63b087218d043c45)(configs), [
    configs.files,
    configs.images
  ]);
  const handleFiles = (event) => {
    props.onChange(event.target.files);
  };
  const counter = (0, import_react.useMemo)(() => {
    if (selectedSum > 1) return `(${selectedSum})`;
  }, [
    selectedSum
  ]);
  return (0, import_jsx_dev_runtime.jsxDEV)("div", {
    className: (0, twMerge)((0, import_classnames.default)("w-full h-full relative p-6 border rounded-[1rem]", {
      "opacity-0": configs.dragabble
    }, props.className)),
    children: [
      (0, import_jsx_dev_runtime.jsxDEV)("input", {
        type: "file",
        multiple: true,
        accept: "image/*",
        className: "absolute inset-0 opacity-0",
        onChange: handleFiles
      }, void 0, false, {
        fileName: "src/image-picker/components/file-selector/file-selector.tsx",
        lineNumber: 35,
        columnNumber: 7
      }, void 0),
      (0, import_jsx_dev_runtime.jsxDEV)("div", {
        className: "text-typography/[.5] text-center pointer-events-none",
        children: [
          configs.locale.select_image,
          " ",
          counter
        ]
      }, void 0, true, {
        fileName: "src/image-picker/components/file-selector/file-selector.tsx",
        lineNumber: 42,
        columnNumber: 7
      }, void 0)
    ]
  }, void 0, true, {
    fileName: "src/image-picker/components/file-selector/file-selector.tsx",
    lineNumber: 24,
    columnNumber: 5
  }, void 0);
};
var $55b0fa228d3114c9$var$dragDropImage = new URL("drag-drop.e052da2e.png", import.meta.url);
var $55b0fa228d3114c9$export$b4a441ca74fcf9d2 = (props) => {
  const configs = (0, import_react.useContext)((0, $190a8be343b4b13e$export$b1da5abff9d0406));
  const ref = (0, import_react.useRef)(null);
  const removeShield = () => {
    var _a;
    const shield = (_a = ref.current) == null ? void 0 : _a.getElementsByClassName("shield")[0];
    if (shield) {
      shield.classList.remove("pointer-events-none");
      ref.current.classList.add("mouse-over");
    }
  };
  const addShield = () => {
    var _a;
    const shield = (_a = ref.current) == null ? void 0 : _a.getElementsByClassName("shield")[0];
    if (shield) {
      shield.classList.add("pointer-events-none");
      ref.current.classList.remove("mouse-over");
    }
  };
  const hightlightZone = (highlight = true) => () => {
    var _a, _b;
    const className = "drag-over";
    if (highlight) (_a = ref.current) == null ? void 0 : _a.classList.add(className);
    else (_b = ref.current) == null ? void 0 : _b.classList.remove(className);
  };
  const dropHandler = (droppedFiles) => {
    var _a;
    const files = (0, $fab42eb3dee39b5b$export$37db6582fd067b92)(configs.files, Array.from(droppedFiles || []));
    if (!configs.multiple && typeof configs.limit == "undefined") props.onDrop([
      files == null ? void 0 : files[0]
    ]);
    else if (configs.multiple) props.onDrop(files);
    else if (typeof configs.limit == "number") props.onDrop(files.slice(0, configs.limit - (configs.files.length + ~~((_a = configs.images) == null ? void 0 : _a.length))));
  };
  function handleZoneEvents(action) {
    const preventFunc = (handler) => {
      return (event) => {
        event.preventDefault();
        event.stopPropagation();
        handler(event);
      };
    };
    const setEvent = (events) => {
      Object.entries(events).forEach(([event, handler]) => ref.current[action](event, preventFunc(handler), false));
    };
    if (ref.current) {
      setEvent({
        drop: (event) => {
          var _a;
          dropHandler((_a = event.dataTransfer) == null ? void 0 : _a.files);
        }
      });
      setEvent({
        dragenter: hightlightZone(),
        dragover: hightlightZone(),
        dragstart: hightlightZone(),
        dragleave: hightlightZone(false),
        drop: hightlightZone(false)
      });
      setEvent({
        mouseover: removeShield,
        mouseleave: addShield
      });
    }
  }
  (0, import_react.useEffect)(() => {
    handleZoneEvents("addEventListener");
    return () => {
      handleZoneEvents("removeEventListener");
    };
  }, []);
  const handleFiles = (files) => {
    dropHandler(files);
  };
  return (0, import_jsx_dev_runtime.jsxDEV)("div", {
    ref,
    id: "drag-drop",
    className: (0, import_classnames.default)(" p-6 border rounded-[1rem] flex items-center justify-center relative overflow-hidden"),
    children: (0, import_jsx_dev_runtime.jsxDEV)("div", {
      className: "shield pointer-events-none",
      children: [
        (0, import_jsx_dev_runtime.jsxDEV)((0, $843874b66901ca92$export$b3f7d4725397d87e), {
          multiple: configs.multiple,
          onChange: handleFiles,
          className: "absolute inset-0"
        }, void 0, false, {
          fileName: "src/image-picker/components/drag-drop/drag-drop.tsx",
          lineNumber: 117,
          columnNumber: 9
        }, void 0),
        (0, import_jsx_dev_runtime.jsxDEV)("div", {
          className: "flex flex-col gap-4 items-center  pointer-events-none",
          children: [
            (0, import_jsx_dev_runtime.jsxDEV)("img", {
              src: $55b0fa228d3114c9$var$dragDropImage.href,
              className: "w-[5rem] h-[5rem] opacity-50 z-0",
              alt: ""
            }, void 0, false, {
              fileName: "src/image-picker/components/drag-drop/drag-drop.tsx",
              lineNumber: 123,
              columnNumber: 11
            }, void 0),
            (0, import_jsx_dev_runtime.jsxDEV)("div", {
              className: "text-[1rem] text-center opacity-50 max-w-[17rem]",
              children: configs.locale.drag_drop_hint
            }, void 0, false, {
              fileName: "src/image-picker/components/drag-drop/drag-drop.tsx",
              lineNumber: 128,
              columnNumber: 11
            }, void 0)
          ]
        }, void 0, true, {
          fileName: "src/image-picker/components/drag-drop/drag-drop.tsx",
          lineNumber: 122,
          columnNumber: 9
        }, void 0)
      ]
    }, void 0, true, {
      fileName: "src/image-picker/components/drag-drop/drag-drop.tsx",
      lineNumber: 116,
      columnNumber: 7
    }, void 0)
  }, void 0, false, {
    fileName: "src/image-picker/components/drag-drop/drag-drop.tsx",
    lineNumber: 109,
    columnNumber: 5
  }, void 0);
};
function $6e44d92c120e3aec$export$914e0b886a5281f8(props) {
  return (0, import_jsx_dev_runtime.jsxDEV)("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    width: "1em",
    height: "1em",
    viewBox: "0 0 24 24",
    ...props,
    children: (0, import_jsx_dev_runtime.jsxDEV)("path", {
      fill: "currentColor",
      d: "M19 4h-3.5l-1-1h-5l-1 1H5v2h14M6 19a2 2 0 0 0 2 2h8a2 2 0 0 0 2-2V7H6z"
    }, void 0, false, {
      fileName: "src/icons/mdi-trash.tsx",
      lineNumber: 13,
      columnNumber: 7
    }, this)
  }, void 0, false, {
    fileName: "src/icons/mdi-trash.tsx",
    lineNumber: 6,
    columnNumber: 5
  }, this);
}
var $8a997f72e00b223f$export$c17561cb55d4db30 = (props) => {
  return (0, import_jsx_dev_runtime.jsxDEV)("div", {
    className: (0, twMerge)((0, import_classnames.default)("w-full flex items-center gap-2 justify-between", props.className)),
    children: [
      (0, import_jsx_dev_runtime.jsxDEV)("div", {
        className: (0, twMerge)((0, import_classnames.default)("w-full h-[5px] bg-white/[.2]  rounded-full", props.progressWrapperClassName)),
        children: (0, import_jsx_dev_runtime.jsxDEV)("div", {
          className: (0, twMerge)((0, import_classnames.default)("h-full bg-white rounded-full transition-all duration-[.3s]", props.progressClassName)),
          style: {
            width: `${props.percent || 0}%`
          }
        }, void 0, false, {
          fileName: "src/image-picker/components/preview/components/progress-bar/progress-bar.tsx",
          lineNumber: 24,
          columnNumber: 9
        }, void 0)
      }, void 0, false, {
        fileName: "src/image-picker/components/preview/components/progress-bar/progress-bar.tsx",
        lineNumber: 16,
        columnNumber: 7
      }, void 0),
      props.showPercent && (0, import_jsx_dev_runtime.jsxDEV)("span", {
        className: (0, twMerge)((0, import_classnames.default)("text-[.7rem] grow-0", props.percentClassName)),
        children: `${Math.floor(props.percent)}%`
      }, void 0, false, {
        fileName: "src/image-picker/components/preview/components/progress-bar/progress-bar.tsx",
        lineNumber: 37,
        columnNumber: 9
      }, void 0)
    ]
  }, void 0, true, {
    fileName: "src/image-picker/components/preview/components/progress-bar/progress-bar.tsx",
    lineNumber: 8,
    columnNumber: 5
  }, void 0);
};
var $3508605efb37992a$var$loadingImage = new URL("loading-image.1c2309b4.png", import.meta.url);
var $3508605efb37992a$export$133773870222880f = (props) => {
  var _a;
  const [imageUrl, setImageUrl] = (0, import_react.useState)(!props.file ? (_a = props.image) == null ? void 0 : _a.path : $3508605efb37992a$var$loadingImage.href);
  const isFile = (0, import_react.useMemo)(() => !!props.file, []);
  const loadImage = (0, import_react.useCallback)(async () => {
    var _a2, _b;
    const arrayBuffer = await ((_a2 = props.file) == null ? void 0 : _a2.arrayBuffer());
    if (arrayBuffer) {
      var arrayBufferView = new Uint8Array(arrayBuffer);
      var blob = new Blob([
        arrayBufferView
      ], {
        type: (_b = props.file) == null ? void 0 : _b.type
      });
      const url = window.URL.createObjectURL(blob);
      setImageUrl(url);
    }
  }, []);
  (0, import_react.useEffect)(() => {
    if (props.file) loadImage();
  }, []);
  const handleRemove = (e) => {
    e.preventDefault();
    e.stopPropagation();
    const payload = {
      isFile
    };
    if (!isFile) payload.image = props.image;
    else payload.file = props.file;
    props.onRemove(payload);
  };
  const name = (0, import_react.useMemo)(() => {
    var _a2, _b;
    return isFile ? (_a2 = props.file) == null ? void 0 : _a2.name : ((_b = props.image) == null ? void 0 : _b.name) || "image";
  }, []);
  const handleImageModal = () => {
    props.onShowInModal({
      url: imageUrl,
      name
    });
  };
  const layout = (0, import_react.useMemo)(() => {
    if (props.large) return (0, import_jsx_dev_runtime.jsxDEV)((0, import_jsx_dev_runtime.Fragment), {
      children: (0, import_jsx_dev_runtime.jsxDEV)("div", {
        className: "items-center relative w-full",
        onClick: handleImageModal,
        children: [
          (0, import_jsx_dev_runtime.jsxDEV)("img", {
            className: "h-[10rem] w-full grow-0 object-cover",
            src: imageUrl
          }, void 0, false, {
            fileName: "src/image-picker/components/preview/preview.tsx",
            lineNumber: 60,
            columnNumber: 13
          }, void 0),
          (0, import_jsx_dev_runtime.jsxDEV)("div", {
            className: "absolute bottom-0 inset-0 bg-gradient-to-t from-black/[.8] to-transparent flex flex-col justify-end p-2 gap-2",
            children: [
              (0, import_jsx_dev_runtime.jsxDEV)("div", {
                children: props.isUploading && (0, import_jsx_dev_runtime.jsxDEV)((0, $8a997f72e00b223f$export$c17561cb55d4db30), {
                  showPercent: true,
                  percent: props.uploadProgress,
                  percentClassName: "text-white"
                }, void 0, false, {
                  fileName: "src/image-picker/components/preview/preview.tsx",
                  lineNumber: 67,
                  columnNumber: 19
                }, void 0)
              }, void 0, false, {
                fileName: "src/image-picker/components/preview/preview.tsx",
                lineNumber: 65,
                columnNumber: 15
              }, void 0),
              (0, import_jsx_dev_runtime.jsxDEV)("div", {
                className: "flex items-center text-white",
                children: [
                  (0, import_jsx_dev_runtime.jsxDEV)("div", {
                    className: "text-[.9rem] h-[1rem] w-full grow relative",
                    children: (0, import_jsx_dev_runtime.jsxDEV)("div", {
                      className: "absolute inset-0",
                      children: name
                    }, void 0, false, {
                      fileName: "src/image-picker/components/preview/preview.tsx",
                      lineNumber: 76,
                      columnNumber: 19
                    }, void 0)
                  }, void 0, false, {
                    fileName: "src/image-picker/components/preview/preview.tsx",
                    lineNumber: 75,
                    columnNumber: 17
                  }, void 0),
                  (0, import_jsx_dev_runtime.jsxDEV)((0, $6e44d92c120e3aec$export$914e0b886a5281f8), {
                    className: "shrink-0 cursor-pointer hover:scale-[1.1] transition-transform duration-100   grow-0 m-1 active:scale-[.95]",
                    fontSize: 20,
                    onClick: handleRemove
                  }, void 0, false, {
                    fileName: "src/image-picker/components/preview/preview.tsx",
                    lineNumber: 79,
                    columnNumber: 17
                  }, void 0)
                ]
              }, void 0, true, {
                fileName: "src/image-picker/components/preview/preview.tsx",
                lineNumber: 74,
                columnNumber: 15
              }, void 0)
            ]
          }, void 0, true, {
            fileName: "src/image-picker/components/preview/preview.tsx",
            lineNumber: 64,
            columnNumber: 13
          }, void 0)
        ]
      }, void 0, true, {
        fileName: "src/image-picker/components/preview/preview.tsx",
        lineNumber: 56,
        columnNumber: 11
      }, void 0)
    }, void 0, false);
    else return (0, import_jsx_dev_runtime.jsxDEV)((0, import_jsx_dev_runtime.Fragment), {
      children: [
        (0, import_jsx_dev_runtime.jsxDEV)("div", {
          className: "flex items-center w-ful gap-2 justify-between p-2",
          onClick: handleImageModal,
          children: [
            (0, import_jsx_dev_runtime.jsxDEV)("img", {
              className: "w-[5rem] h-[5rem] !rounded-[.5rem] border p-2 grow-0",
              src: imageUrl
            }, void 0, false, {
              fileName: "src/image-picker/components/preview/preview.tsx",
              lineNumber: 96,
              columnNumber: 13
            }, void 0),
            (0, import_jsx_dev_runtime.jsxDEV)("div", {
              className: "text-[.9rem] w-full h-4 grow relative overflow-hidden",
              children: (0, import_jsx_dev_runtime.jsxDEV)("div", {
                className: "absolute inset-0",
                title: name,
                children: name
              }, void 0, false, {
                fileName: "src/image-picker/components/preview/preview.tsx",
                lineNumber: 101,
                columnNumber: 15
              }, void 0)
            }, void 0, false, {
              fileName: "src/image-picker/components/preview/preview.tsx",
              lineNumber: 100,
              columnNumber: 13
            }, void 0),
            (0, import_jsx_dev_runtime.jsxDEV)((0, $6e44d92c120e3aec$export$914e0b886a5281f8), {
              className: "shrink-0 cursor-pointer hover:scale-[1.1] transition-transform duration-100   grow-0 text-red-700 mr-2 active:scale-[.95]",
              fontSize: 24,
              onClick: handleRemove
            }, void 0, false, {
              fileName: "src/image-picker/components/preview/preview.tsx",
              lineNumber: 106,
              columnNumber: 13
            }, void 0)
          ]
        }, void 0, true, {
          fileName: "src/image-picker/components/preview/preview.tsx",
          lineNumber: 92,
          columnNumber: 11
        }, void 0),
        props.isUploading && (0, import_jsx_dev_runtime.jsxDEV)("div", {
          className: "px-2 pb-2",
          children: (0, import_jsx_dev_runtime.jsxDEV)((0, $8a997f72e00b223f$export$c17561cb55d4db30), {
            percent: props.uploadProgress,
            progressClassName: "bg-cyan-500",
            progressWrapperClassName: "bg-cyan-50",
            showPercent: true
          }, void 0, false, {
            fileName: "src/image-picker/components/preview/preview.tsx",
            lineNumber: 114,
            columnNumber: 15
          }, void 0)
        }, void 0, false, {
          fileName: "src/image-picker/components/preview/preview.tsx",
          lineNumber: 113,
          columnNumber: 13
        }, void 0)
      ]
    }, void 0, true);
  }, [
    props.large,
    props.isUploading,
    imageUrl,
    props.uploadProgress,
    props.uploaded
  ]);
  return (0, import_jsx_dev_runtime.jsxDEV)("div", {
    className: (0, import_classnames.default)("flex items-center border rounded-[.5rem] overflow-hidden gap-2 transition-colors duration-[.3s]", {
      "border-red-500 border-[2px] bg-red-500/[.2]": props.failUpload
    }),
    children: (0, import_jsx_dev_runtime.jsxDEV)("div", {
      className: "flex flex-col gap-2 w-full",
      children: layout
    }, void 0, false, {
      fileName: "src/image-picker/components/preview/preview.tsx",
      lineNumber: 142,
      columnNumber: 7
    }, void 0)
  }, void 0, false, {
    fileName: "src/image-picker/components/preview/preview.tsx",
    lineNumber: 134,
    columnNumber: 5
  }, void 0);
};
var $6661cbb223503df2$var$abortControllers = {};
var $6661cbb223503df2$export$5130fb4c263997a4 = (id) => {
  const controller = $6661cbb223503df2$var$abortControllers[id];
  if (controller) {
    controller.abort();
    delete $6661cbb223503df2$var$abortControllers[id];
  }
};
var $6661cbb223503df2$export$b4ba47569ccac746 = (props) => {
  const setUploadingItemData = (id, data) => {
    props.setUploadingFiles((uploading) => ({
      ...Object.fromEntries(Object.entries(uploading).map(([fileID, prg]) => id == fileID ? [
        fileID,
        data
      ] : [
        fileID,
        prg
      ]))
    }));
  };
  const setUploadProgress = (id, progress) => {
    setUploadingItemData(id, progress);
  };
  const setUploadFail = (id) => {
    setUploadingItemData(id, -1);
  };
  const setUploadDone = (id, files) => {
    setUploadingItemData(id, 100);
    props.setUploadedFiles((uploaded) => [
      ...uploaded,
      files.find((file) => (0, $fab42eb3dee39b5b$export$a0781c1cbbc5fc36)(file) == id)
    ]);
  };
  return {
    async upload(files) {
      if (!props.uploadOnSelect) return;
      if (!props.uploadHandler && !props.uploadAction) throw Error("You didn't provide any upload action to upload files");
      let axios;
      if (!props.uploadHandler) axios = (0, axios_default).create({
        baseURL: props.uploadAction
      });
      props.setUploadingFiles((uploadingFiles) => ({
        ...uploadingFiles,
        ...Object.fromEntries(files.map((file) => [
          (0, $fab42eb3dee39b5b$export$a0781c1cbbc5fc36)(file),
          0
        ]))
      }));
      const promises = [];
      for (const file of files) {
        const fileID = (0, $fab42eb3dee39b5b$export$a0781c1cbbc5fc36)(file);
        if (props.uploadHandler)
          promises.push(props.uploadHandler(file, (0, $fab42eb3dee39b5b$export$a0781c1cbbc5fc36)(file), {
            done: setUploadDone.bind(this, fileID, files),
            fail: setUploadFail.bind(this, fileID),
            setProgress: setUploadProgress.bind(this, fileID),
            cancel: $6661cbb223503df2$export$5130fb4c263997a4.bind(this, fileID)
          }));
        else {
          const form = new FormData();
          const abortController = new AbortController();
          form.append("file", file);
          let uploadOptions = {
            onUploadProgress: (progEvent) => {
              setUploadProgress(fileID, progEvent.loaded * 100 / progEvent.total);
            },
            signal: abortController.signal
          };
          if (props.uploadAxiosOptions) uploadOptions = Object.assign({}, uploadOptions, props.uploadAxiosOptions);
          promises.push(axios.post("/", form, uploadOptions).then((data) => {
            setUploadDone(fileID, files);
            return data;
          }).catch((err) => {
            setUploadFail(fileID);
            return Promise.reject(err);
          }));
          $6661cbb223503df2$var$abortControllers[fileID] = abortController;
        }
      }
      try {
        const result = await Promise.all(promises);
        return result;
      } catch (error) {
        console.error("Upload failed!");
      }
    }
  };
};
function $9d09422361664eea$export$21c1139956c4884f(props) {
  return (0, import_jsx_dev_runtime.jsxDEV)("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    width: "1em",
    height: "1em",
    viewBox: "0 0 32 32",
    ...props,
    children: [
      (0, import_jsx_dev_runtime.jsxDEV)("path", {
        fill: "currentColor",
        d: "M16 2C8.2 2 2 8.2 2 16s6.2 14 14 14s14-6.2 14-14S23.8 2 16 2m0 26C9.4 28 4 22.6 4 16S9.4 4 16 4s12 5.4 12 12s-5.4 12-12 12"
      }, void 0, false, {
        fileName: "src/icons/carbon-close-outline.tsx",
        lineNumber: 13,
        columnNumber: 7
      }, this),
      (0, import_jsx_dev_runtime.jsxDEV)("path", {
        fill: "currentColor",
        d: "M21.4 23L16 17.6L10.6 23L9 21.4l5.4-5.4L9 10.6L10.6 9l5.4 5.4L21.4 9l1.6 1.6l-5.4 5.4l5.4 5.4z"
      }, void 0, false, {
        fileName: "src/icons/carbon-close-outline.tsx",
        lineNumber: 17,
        columnNumber: 7
      }, this)
    ]
  }, void 0, true, {
    fileName: "src/icons/carbon-close-outline.tsx",
    lineNumber: 6,
    columnNumber: 5
  }, this);
}
var $8533bf7f7367ed21$export$183013bc7f2f4b5e = (props) => {
  const configs = (0, import_react.useContext)((0, $190a8be343b4b13e$export$b1da5abff9d0406));
  const [loaded, setLoaded] = (0, import_react.useState)(false);
  const onLoadHandler = () => {
    setLoaded(true);
  };
  (0, import_react.useEffect)(() => {
    setLoaded(props.open);
  }, [
    props.open
  ]);
  return (0, import_jsx_dev_runtime.jsxDEV)("div", {
    className: (0, twMerge)((0, import_classnames.default)("absolute inset-0", {
      "pointer-events-none": !props.open && !loaded
    })),
    children: [
      (0, import_jsx_dev_runtime.jsxDEV)("span", {
        className: (0, twMerge)((0, import_classnames.default)("absolute inset-0 bg-black/[.2] transition-opacity duration-[.3s] z-0", {
          "opacity-0": !props.open
        })),
        onClick: props.onClose
      }, void 0, false, {
        fileName: "src/image-picker/components/preview-modal/preview-modal.tsx",
        lineNumber: 25,
        columnNumber: 7
      }, void 0),
      props.open && (0, import_jsx_dev_runtime.jsxDEV)("div", {
        className: (0, twMerge)((0, import_classnames.default)("max-w-[90%] max-h-[90%] absolute translate-x-[-50%] translate-y-[-50%] left-[50%] top-[50%] p-2 rounded-[.5rem] border bg-white z-10 flex flex-col gap-2 transition-opacity duration-[.3s]", {
          "opacity-0": !loaded
        })),
        children: [
          (0, import_jsx_dev_runtime.jsxDEV)("div", {
            className: "flex items-center justify-between",
            children: [
              (0, import_jsx_dev_runtime.jsxDEV)("div", {
                className: "text-typography text-[.8rem]",
                children: configs.locale.preview_image_modal_title
              }, void 0, false, {
                fileName: "src/image-picker/components/preview-modal/preview-modal.tsx",
                lineNumber: 48,
                columnNumber: 13
              }, void 0),
              (0, import_jsx_dev_runtime.jsxDEV)((0, $9d09422361664eea$export$21c1139956c4884f), {
                fontSize: 20,
                className: "text-typography cursor-pointer",
                onClick: props.onClose
              }, void 0, false, {
                fileName: "src/image-picker/components/preview-modal/preview-modal.tsx",
                lineNumber: 51,
                columnNumber: 13
              }, void 0)
            ]
          }, void 0, true, {
            fileName: "src/image-picker/components/preview-modal/preview-modal.tsx",
            lineNumber: 47,
            columnNumber: 11
          }, void 0),
          (0, import_jsx_dev_runtime.jsxDEV)("img", {
            src: props.url,
            className: "w-full h-full rounded-[1rem]",
            onLoad: onLoadHandler
          }, void 0, false, {
            fileName: "src/image-picker/components/preview-modal/preview-modal.tsx",
            lineNumber: 57,
            columnNumber: 11
          }, void 0),
          !!props.name && (0, import_jsx_dev_runtime.jsxDEV)("div", {
            className: "text-typography text-[.8rem] text-center",
            children: props.name
          }, void 0, false, {
            fileName: "src/image-picker/components/preview-modal/preview-modal.tsx",
            lineNumber: 63,
            columnNumber: 13
          }, void 0)
        ]
      }, void 0, true, {
        fileName: "src/image-picker/components/preview-modal/preview-modal.tsx",
        lineNumber: 37,
        columnNumber: 9
      }, void 0)
    ]
  }, void 0, true, {
    fileName: "src/image-picker/components/preview-modal/preview-modal.tsx",
    lineNumber: 18,
    columnNumber: 5
  }, void 0);
};
var $9956d2773e85558f$var$ImagePicker = () => {
  const configs = (0, import_react.useContext)((0, $190a8be343b4b13e$export$b1da5abff9d0406));
  const [uploadingFiles, setUploadingFiles] = (0, import_react.useState)({});
  const [previewModal, setPreviewModal] = (0, import_react.useState)();
  const [uploadedFiles, setUploadedFiles] = (0, import_react.useState)([]);
  (0, import_react.useEffect)(() => {
    var _a;
    (_a = configs.onChange) == null ? void 0 : _a.call(configs, configs.files);
  }, [
    configs.files,
    configs.onChange
  ]);
  const selectedSum = (0, import_react.useMemo)(() => (0, $fab42eb3dee39b5b$export$63b087218d043c45)(configs), [
    configs.files,
    configs.images
  ]);
  const isLimitReached = (0, import_react.useMemo)(() => (0, $fab42eb3dee39b5b$export$34bc97de79737939)(configs), [
    configs.files,
    configs.images,
    configs.multiple,
    configs.limit
  ]);
  const isUploading = (0, import_react.useCallback)((fileID) => {
    const progress = uploadingFiles[fileID];
    if (typeof progress == "undefined") return false;
    return progress < 100 && progress > -1;
  }, [
    uploadingFiles
  ]);
  const isUploaded = (0, import_react.useCallback)((fileID) => uploadedFiles.findIndex((file) => (0, $fab42eb3dee39b5b$export$a0781c1cbbc5fc36)(file) == fileID) != -1, [
    uploadedFiles
  ]);
  const isFailUpload = (0, import_react.useCallback)((fileID) => {
    const progress = uploadingFiles[fileID];
    if (!progress) return false;
    return progress == -1;
  }, [
    uploadingFiles
  ]);
  const uploader = (0, $6661cbb223503df2$export$b4ba47569ccac746)({
    isUploading,
    setUploadedFiles,
    setUploadingFiles,
    uploadAction: configs.uploadAction,
    uploadHandler: configs.uploadHandler,
    uploadOnSelect: configs.uploadOnSelect,
    uploadAxiosOptions: configs.uploadAxiosOptions
  });
  const handleDropFiles = (files) => {
    configs.onFilesChange((selected) => [
      ...selected,
      ...files
    ]);
    uploader.upload(Array.from(files));
  };
  const handleRemove = (image) => {
    var _a;
    if (image.isFile) {
      configs.onFilesChange((files) => [
        ...files.filter((file) => (0, $fab42eb3dee39b5b$export$a0781c1cbbc5fc36)(file) != (0, $fab42eb3dee39b5b$export$a0781c1cbbc5fc36)(image.file))
      ]);
      (0, $6661cbb223503df2$export$5130fb4c263997a4)((0, $fab42eb3dee39b5b$export$a0781c1cbbc5fc36)(image.file));
    } else (_a = configs.onRemoveImage) == null ? void 0 : _a.call(configs, image.image);
  };
  const previewSection = (0, import_react.useMemo)(() => {
    var _a;
    const fileItems = Array.from(configs.files).map((file, idx) => (0, import_jsx_dev_runtime.jsxDEV)((0, $3508605efb37992a$export$133773870222880f), {
      large: !configs.multiple && !configs.limit,
      file,
      uploaded: isUploaded((0, $fab42eb3dee39b5b$export$a0781c1cbbc5fc36)(file)),
      isUploading: isUploading((0, $fab42eb3dee39b5b$export$a0781c1cbbc5fc36)(file)),
      failUpload: isFailUpload((0, $fab42eb3dee39b5b$export$a0781c1cbbc5fc36)(file)),
      onRemove: handleRemove,
      uploadProgress: uploadingFiles[(0, $fab42eb3dee39b5b$export$a0781c1cbbc5fc36)(file)],
      onShowInModal: (url) => setPreviewModal(url)
    }, (0, $fab42eb3dee39b5b$export$a0781c1cbbc5fc36)(file), false, {
      fileName: "src/image-picker/image-picker.tsx",
      lineNumber: 89,
      columnNumber: 7
    }, void 0));
    const imageItems = ((_a = configs.images) == null ? void 0 : _a.map((image, idx) => (0, import_jsx_dev_runtime.jsxDEV)((0, $3508605efb37992a$export$133773870222880f), {
      large: !configs.multiple && !configs.limit,
      image,
      onRemove: handleRemove,
      onShowInModal: (url) => setPreviewModal(url)
    }, `image_${idx}`, false, {
      fileName: "src/image-picker/image-picker.tsx",
      lineNumber: 103,
      columnNumber: 9
    }, void 0))) || [];
    const items = fileItems.concat(imageItems);
    return (0, import_jsx_dev_runtime.jsxDEV)("div", {
      className: "flex flex-col gap-4",
      children: items
    }, void 0, false, {
      fileName: "src/image-picker/image-picker.tsx",
      lineNumber: 114,
      columnNumber: 12
    }, void 0);
  }, [
    configs.files,
    configs.images,
    uploadingFiles,
    uploadedFiles
  ]);
  const uploadInterface = (0, import_react.useMemo)(() => {
    if (!isLimitReached) {
      if (configs.dragabble) return (0, import_jsx_dev_runtime.jsxDEV)((0, $55b0fa228d3114c9$export$b4a441ca74fcf9d2), {
        onDrop: handleDropFiles
      }, selectedSum, false, {
        fileName: "src/image-picker/image-picker.tsx",
        lineNumber: 120,
        columnNumber: 16
      }, void 0);
      else return (0, import_jsx_dev_runtime.jsxDEV)((0, $843874b66901ca92$export$b3f7d4725397d87e), {
        onChange: handleDropFiles
      }, selectedSum, false, {
        fileName: "src/image-picker/image-picker.tsx",
        lineNumber: 122,
        columnNumber: 16
      }, void 0);
    }
  }, [
    selectedSum,
    isLimitReached
  ]);
  return (0, import_jsx_dev_runtime.jsxDEV)("div", {
    className: "flex flex-col gap-5",
    style: {
      direction: configs.rtl ? "rtl" : "ltr"
    },
    children: [
      uploadInterface,
      configs.showPreview && previewSection,
      (0, import_jsx_dev_runtime.jsxDEV)((0, $8533bf7f7367ed21$export$183013bc7f2f4b5e), {
        open: !!previewModal,
        ...previewModal,
        onClose: () => setPreviewModal(void 0)
      }, void 0, false, {
        fileName: "src/image-picker/image-picker.tsx",
        lineNumber: 135,
        columnNumber: 7
      }, void 0)
    ]
  }, void 0, true, {
    fileName: "src/image-picker/image-picker.tsx",
    lineNumber: 127,
    columnNumber: 5
  }, void 0);
};
var $9956d2773e85558f$var$WithProvider = (props) => (0, import_jsx_dev_runtime.jsxDEV)((0, $190a8be343b4b13e$export$2881499e37b75b9a), {
  ...props,
  children: (0, import_jsx_dev_runtime.jsxDEV)($9956d2773e85558f$var$ImagePicker, {}, void 0, false, {
    fileName: "src/image-picker/image-picker.tsx",
    lineNumber: 146,
    columnNumber: 5
  }, void 0)
}, void 0, false, {
  fileName: "src/image-picker/image-picker.tsx",
  lineNumber: 145,
  columnNumber: 3
}, void 0);
var $9956d2773e85558f$export$2e2bcd8739ae039 = $9956d2773e85558f$var$WithProvider;
export {
  $9956d2773e85558f$export$2e2bcd8739ae039 as ImagePicker
};
/*! Bundled license information:

classnames/index.js:
  (*!
  	Copyright (c) 2018 Jed Watson.
  	Licensed under the MIT License (MIT), see
  	http://jedwatson.github.io/classnames
  *)
*/
//# sourceMappingURL=@abak_react-image-picker.js.map
